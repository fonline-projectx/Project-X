//
// FOnline: 2238
// Rotators
//
// prod_tree_firewood.fos
//

#include "_macros.fos"
#include "production_h.fos"
#include "utils_h.fos"

#define TEXT_CHOPPED      (3016)
#define TEXT_NONE_LEFT    (3051)

int RegenerableCount = 0;

// normal, regenerable
void item_init(Item& item, bool firstTime)
{
    item.SetEvent(ITEM_EVENT_USE_ON_ME, "_UseItemOnTree");
    item.SetEvent(ITEM_EVENT_SKILL, "_UseSkill");
    item.SetEvent(ITEM_EVENT_FINISH, "_FinishRegenerable");
    if(firstTime)
        AMOUNT(item) = __WoodCapacity;

    Map@ map = GetMap(item.MapId);
    if(valid(map))
    {
        if(map.GetLocation().IsTown())
        {
            RegenerableCount++;
            StartRegeneration(item, "e_Regen");
        }
    }

    ChangePic(item);
}
void _FinishRegenerable(Item& item, bool)
{
    RegenerableCount--;
    ReduceCounter(PID_FIREWOOD, COUNTER(item));
}

// non regenerable, for encounters
void _EncTree(Item& item, bool firstTime)
{
    item.SetEvent(ITEM_EVENT_USE_ON_ME, "_UseItemOnTree");
    if(firstTime)
        AMOUNT(item) = Random(0, __WoodCapacity);
    ChangePic(item);
}

uint e_Regen(array<uint>@ values)
{
    Item@ item = GetItem(values[0]);
    if(!valid(item))
        return 0;
    Regenerate(item, PID_FIREWOOD, __WoodCapacity, __WoodRegen, RegenerableCount);
    ChangePic(item);
    return RegenerationInterval;
}

array<string@> NormalPics = { "art\\items\\TREE7.FRM", "art\\items\\TREE8.FRM", "art\\items\\TREE9.FRM" };
PicHashes NormalPicHashes(NormalPics);
array<string@> GrowingPics = { "art\\items\\tree4.fofrm", "art\\items\\tree5.fofrm", "art\\items\\tree6.fofrm" };
PicHashes GrowingPicHashes(GrowingPics);
array<string@> ChoppedPics = { "art\\items\\treechopped1.fofrm" };
PicHashes ChoppedPicHashes(ChoppedPics);

class GatherCallback : IGatherCallback
{
    void Callback(Item& item, Critter& cr, Item@ usedItem)
    {
        cr.Animate(ANIM1_HAMMER, ANIM2_SWING_1H, usedItem, true, true);
        ChangePic(item);
        if(cr.Mode[MODE_HIDE] != 0 && cr.GetAccess() < ACCESS_TESTER)
            cr.ModeBase[MODE_HIDE] = 0;
    }
};
GatherCallback Callback;

void ChangePic(Item& item)
{
    float ratio = float(AMOUNT(item)) / float(__WoodCapacity);
    if(ratio > 0.5)
        item.PicMap = NormalPicHashes.GetRandom();
    else if(ratio > 0)
        item.PicMap = GrowingPicHashes.GetRandom();
    else if(AMOUNT(item) == 0)
        item.PicMap = ChoppedPicHashes.GetRandom();
    item.Update();
}
bool _UseItemOnTree(Item& item, Critter& cr, Item@ usedItem)
{
    if(!valid(usedItem))
        return false;
    uint16 tool_pid = usedItem.GetProtoId();
    if(tool_pid == PID_AXE || tool_pid == PID_PRIMITIVE_TOOL)
    {
        return Gather(item, cr, usedItem, PID_FIREWOOD, __WoodBatch, TEXT_CHOPPED, TEXT_NONE_LEFT, Callback);
    }
    return false;
}
bool _UseSkill(Item& item, Critter& cr, int skill)
{
    if(skill == SK_SCIENCE && cr.GetAccess() >= ACCESS_MODER)
    {
        cr.Say(SAY_NETMSG, "Amount left: " + AMOUNT(item) + ", counter: " + COUNTER(item) + ", total facilities: " + RegenerableCount);
        return true;
    }
    else if(skill == SK_REPAIR && cr.GetAccess() >= ACCESS_MODER)
    {
        Regenerate(item, PID_FIREWOOD, __WoodCapacity, __WoodRegen, RegenerableCount);
        ChangePic(item);
        cr.Say(SAY_NETMSG, "You've regenerated facility.");
        return true;
    }
    return false;
}
