//
// FOnline: 2238
// Rotators
//
// weather_h.fos
//

#ifndef __WEATHER_H__
#define __WEATHER_H__

#define WEATHER_CONFIG                "config\\Weather.cfg"

#define WEATHER_TYPE_RAIN             (1)
#define WEATHER_TYPE_RADIATION        (2)
#define WEATHER_TYPE_MAX              (2)

// WeatherZone::Action()
// actions are executed only when zone isn't moving
#define WEATHER_ACTION_NONE           (0)
#define WEATHER_ACTION_DELETE         (1)           // changes Level -> 0, Radius -> 0, marks for deletion
#define WEATHER_ACTION_SETFLAG        (2)
#define WEATHER_ACTION_UNSETFLAG      (3)
#define WEATHER_ACTION_UPDATETIME     (4)
#define WEATHER_ACTION_SPEEDMOVE      (5)
#define WEATHER_ACTION_SPEEDLEVEL     (6)
#define WEATHER_ACTION_SPEEDRADIUS    (7)
#define WEATHER_ACTION_POSITION       (8)
#define WEATHER_ACTION_MOVE           (9)
#define WEATHER_ACTION_LEVEL          (10)
#define WEATHER_ACTION_RADIUS         (11)
#define WEATHER_ACTION_SUBZONES       (12)
#define WEATHER_ACTION_LOCK           (13)
#define WEATHER_ACTION_UNLOCK         (14)
#define WEATHER_ACTION_MAX            (15)                   // end point

#define WEATHER_FLAG_TODELETE         (0x0000002)
#define WEATHER_FLAG_CHANGETYPE       (0x0000004)
#define WEATHER_FLAG_ATDAY            (0x0000008)
#define WEATHER_FLAG_ATNIGHT          (0x0000010)
#define WEATHER_FLAG_NOMOVE           (0x0000020)

// for WorldEditor / weather_rain.fos

#define RAIN_NONE                     (0)
#define RAIN_OUTSIDE                  (1)
#define RAIN_OUTSIDE_DESERT           (2)
#define RAIN_BUILDING                 (3)
#define RAIN_BUILDING_TOP             (4)
#define RAIN_BUILDING_BOTTOM          (5)
#define RAIN_CAVE                     (6)
#define RAIN_MINE                     (7)
#define RAIN_COAST                    (8)
#define RAIN_SEA                      (9)

shared interface IWeatherZone
{
    uint GetID();
    bool Load();
    bool Save();

    string GetName();
    void   SetName(string name);

    uint GetTimeEvent();
    void SetTimeEvent(uint id);

    int  GetFlags();
    bool GetFlag(int flag);
    void SetFlag(int flag);
    void UnsetFlag(int flag);

    uint GetSpeedMove();
    bool SetSpeedMove(uint speed);
    uint GetSpeedLevel();
    bool SetSpeedLevel(uint speed);
    uint GetSpeedRadius();
    bool SetSpeedRadius(uint speed);
    uint GetSubZones();
    bool SetSubZones(uint subzones);

    bool SetType(uint type);
    bool Position(uint coords_x, uint coords_y);
    bool Move(uint coords_x, uint coords_y);
    bool Level(uint level);
    bool Radius(uint radius);

    bool LoadActions(string& filename);
    void Action(uint action, uint data1, uint data2);
    void Update();
    void UpdateFast(Location@ loc);
    void Lock();
    void Unlock();
    uint GetUpdateTime();
    uint SetUpdateTime(uint time);
    void Delete();
};

#ifndef __WEATHER__

import void InitWeather()                                                                                                                                       from "weather";
import void SaveWeather()                                                                                                                                       from "weather";

import uint AddWeatherZone(string& name)                                                                                                      from "weather";
import uint AddWeatherZone(uint coords_x, uint coords_y, uint type)                                           from "weather";

import IWeatherZone@ GetWeatherZone(uint id)                                                                                          from "weather";
import IWeatherZone@ GetWeatherZone(string& name)                                                                                     from "weather";

import void WeatherUpdate(Critter@ critter, uint& type, int& level)                                           from "weather";
import void WeatherUpdate(Location@ loc, uint& type, int& level)                                                      from "weather";
import void WeatherUpdate(int locid, uint type, int level)                                                            from "weather";

import void WeatherUpdateFast(Location@ loc)                                                                                          from "weather";

import void DeleteWeatherZone(uint& id, uint& speed_level, uint& speed_radius)                        from "weather";
import void DeleteWeatherZone(string& name, uint& speed_level, uint& speed_radius)            from "weather";
import void DeleteWeatherZone(IWeatherZone@ zone, uint& speed_level, uint& speed_radius)      from "weather";
#endif // !__WEATHER__
#endif // __WEATHER_H__
