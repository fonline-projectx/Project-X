//
// FOnline: 2238
// Rotators
//
// prod_rocks_minerals.fos
//

#include "_macros.fos"
#include "production_h.fos"

// import void ModifyInfluenceBuffer(Critter& cr, int value) from "town";

#define STR_TEXT_MINERALS    (3013)

int MineralsCount = 0;
int Minerals2Count = 0;

void item_init(Item& item, bool firstTime)
{
    item.SetEvent(ITEM_EVENT_USE_ON_ME, "_UseItemMinerals");
    item.SetEvent(ITEM_EVENT_FINISH, "_FinishMinerals");
    if(firstTime && AMOUNT(item) == 0)
        AMOUNT(item) = __IronOreCapacity;
    MineralsCount++;
    StartRegeneration(item, "e_RegenMinerals");
}
void _NormalDepletable(Item& item, bool firstTime)
{
    item.SetEvent(ITEM_EVENT_USE_ON_ME, "_UseItemMinerals");
    if(firstTime && AMOUNT(item) == 0)
        AMOUNT(item) = __IronOreCapacity;
}
void _Advanced(Item& item, bool firstTime)
{
    item.SetEvent(ITEM_EVENT_USE_ON_ME, "_UseItemMinerals2");
    item.SetEvent(ITEM_EVENT_FINISH, "_FinishMinerals2");
    if(firstTime && AMOUNT(item) == 0)
        AMOUNT(item) = __Ore2Capacity;
    Minerals2Count++;
    StartRegeneration(item, "e_RegenMinerals2");
}
void _AdvancedDepletable(Item& item, bool firstTime)
{
    item.SetEvent(ITEM_EVENT_USE_ON_ME, "_UseItemMinerals2");
    if(firstTime && AMOUNT(item) == 0)
        AMOUNT(item) = __Ore2Capacity;
}
void _FinishMinerals(Item& item, bool)
{
    MineralsCount--;
    ReduceCounter(PID_MINERAL, COUNTER(item));
}
void _FinishMinerals2(Item& item, bool)
{
    Minerals2Count--;
    ReduceCounter(PID_MINERALS2, COUNTER(item));
}
uint e_RegenMinerals(array<uint>@ values)
{
    Item@ item = GetItem(values[0]);
    if(!valid(item))
        return 0;
    Regenerate(item, PID_MINERAL, __MineralsCapacity, __MineralsRegen, MineralsCount);
    return RegenerationInterval;
}
uint e_RegenMinerals2(array<uint>@ values)
{
    Item@ item = GetItem(values[0]);
    if(!valid(item))
        return 0;
    Regenerate(item, PID_MINERALS2, __Minerals2Capacity, __Minerals2Regen, Minerals2Count);
    return RegenerationInterval;
}

class GatherCallback : IGatherCallback
{
    void Callback(Item& item, Critter& cr, Item@ usedItem)
    {
        cr.Animate(ANIM1_HAMMER, ANIM2_SWING_1H, usedItem, true, true);
        if(cr.Mode[MODE_HIDE] != 0 && cr.GetAccess() < ACCESS_TESTER)
            cr.ModeBase[MODE_HIDE] = 0;
        // ModifyInfluenceBuffer(cr, 10);
    }
};
GatherCallback Callback;

bool _UseItemMinerals(Item& item, Critter& cr, Item@ usedItem)
{
    if(usedItem.GetProtoId() == PID_SLEDGEHAMMER ||
       usedItem.GetProtoId() == PID_SUPER_SLEDGE ||
       usedItem.GetProtoId() == PID_PRIMITIVE_TOOL)
    {
        return Gather(item, cr, usedItem, PID_MINERAL, __MineralsBatch, STR_TEXT_MINERALS, STR_PROD_DEPLETED, Callback);
    }
    return false;
}
bool _UseItemMinerals2(Item& item, Critter& cr, Item@ usedItem)
{
    if(usedItem.GetProtoId() == PID_SLEDGEHAMMER ||
       usedItem.GetProtoId() == PID_SUPER_SLEDGE ||
       usedItem.GetProtoId() == PID_PRIMITIVE_TOOL)
    {
        return Gather(item, cr, usedItem, PID_MINERALS2, __Minerals2Batch, STR_TEXT_MINERALS, STR_PROD_DEPLETED, Callback);
    }
    return false;
}
