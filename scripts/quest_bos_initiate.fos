//
// FOnline: 2238
// Rotators
//
// quest_bos_initiate.fos
//

#include "_colors.fos"
#include "_macros.fos"
#include "_vars.fos"
#include "_maps.fos"
#include "_dialogs.fos"
#include "groups_h.fos"
#include "utils_h.fos"
#include "mapdata_h.fos"
#include "MSGSTR.h"

import bool LockerOpen(Item& item) from "lockers";

#define HUMMER_REPAIR_DIFFICULTY    (75)

import void OnOpenContainer(Item@ targetItem) from "lockers";

void spawn(Critter& player, int, int, int)
{
    r_SpawnBunker(player, null);
}

void r_SpawnBunker(Critter& player, Critter@ npc)
{
    Critter@[] crits = { player };
    int loc = CreateLocation(LOCATION_AnOldBunker, Random(1750, 1850), Random(1900,1950), crits);
    if(loc == 0)
        return;
    GameVar@ locidv = GetLocalVar(LVAR_q_bosbunker_locid, player.Id);
    locidv = loc;
    // player.SetKnownLoc(true, loc);
    Location@ location = GetLocation(loc);
    location.Color = COLOR_WM_QUEST;
    location.Update();
    Map@      map = location.GetMapByIndex(0);
    SetRootMapData(map, MAP_DATA_OWNER, player.Id);
    if(player.Mode[MODE_DEFAULT_COMBAT] == COMBAT_MODE_TURN_BASED)
        SetTurnBasedAvailability(location);
    SetQuestGarbager(0, player.Id, loc, LVAR_q_bos_initiatequest_start, 999);
    // player.SetKnownLoc(true, loc);
}

void _InjuredSoldier(Critter& cr, bool firstTime)
{
    // todo: ex events
    cr.StatBase[ST_HEALING_RATE] = 0;
    cr.StatBase[ST_CURRENT_HP] = -10;
    cr.SetEvent(CRITTER_EVENT_USE_ITEM_ON_ME, "_InjuredItem");
    cr.SetEvent(CRITTER_EVENT_USE_SKILL_ON_ME, "_InjuredSkill");
}

bool _InjuredItem(Critter& cr, Critter& who, Item& item)
{
    return InjuredDialog(who, cr);
}

bool _InjuredSkill(Critter& cr, Critter& who, int skill)
{
    return InjuredDialog(who, cr);
}

bool InjuredDialog(Critter& player, Critter& npc)
{
    player.StatBase[ST_VAR0] = npc.Id;
    return RunDialog(player, DIALOG_se_bos_injured, npc.HexX, npc.HexY, false);
}

void r_HealSoldier(Critter& player, Critter@ npc, int val)
{
    Critter@ cr = GetCritter(player.Stat[ST_VAR0]);
    if(!valid(cr))
        return;
    cr.StatBase[ST_CURRENT_HP] += val;
}

void r_RetireMap(Critter& player, Critter@ npc)
{
    // injured
    GameVar@ var = GetLocalVar(LVAR_se_bosbattleground, player.Id);
    if(var.GetValue() != 0)
    {
        Location@ loc = GetLocation(var.GetValue());
        if(valid(loc))
            loc.AutoGarbage = true;
    }

    // hummer
    @var = GetLocalVar(LVAR_se_boscrashedhummer, player.Id);
    if(var.GetValue() != 0)
    {
        Location@ loc = GetLocation(var.GetValue());
        if(valid(loc))
        {
            loc.AutoGarbage = true;
            CreateTimeEvent(AFTER(REAL_SECOND(15)), "e_HummerAway", loc.Id, true);
        }
    }
}

uint e_HummerAway(array<uint>@ values)
{
    Location@ loc = GetLocation(values[0]);
    if(!valid(loc))
        return 0;
    Map@            map = loc.GetMapByIndex(0);
    array<Critter@> crits;
    for(uint i = 0, j = map.GetCritters(0, FIND_LIFE_AND_KO | FIND_ONLY_NPC, crits); i < j; i++)
        if(crits[i].Stat[ST_TEAM_ID] == FACTION_BOS)
            DeleteNpc(crits[i]);

    array<Item@> items;
    for(uint i = 0, j = map.GetItems(800, items); i < j; i++)       // hummers
    {
        GameVar@ var = GetLocalVar(LIVAR_bos_hummer, items[i].Id);
        if(var.GetValue() != 0)
            DeleteItem(items[i]);
    }
    return 0;
}

void _Hummer(Item& item, bool firstTime)
{
    GameVar@ var = GetLocalVar(LIVAR_bos_hummer, item.Id);
    item.SetEvent(ITEM_EVENT_SKILL, "_HummerSkill");
    item.SetEvent(ITEM_EVENT_USE_ON_ME, "_HummerUseOnMe");
    var = 1;
}

bool _HummerUseOnMe(Item& hummer, Critter& crit, Item@ item)
{
    if(!valid(item))
        return false;
    crit.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING);
    return true;
}

bool _HummerSkill(Item& hummer, Critter& crit, int skill)
{
    crit.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_USE_NOTHING);
    return true;
}

void _MapHummer(Map& map, bool firstTime)
{}

void _MapBattleground(Map& map, bool firstTime)
{}

void _GhostFarmCritterIn(Map& map, Critter& cr)
{
    if(cr.IsNpc())
        return;
    GameVar@ var = GetLocalVar(LVAR_q_bos_initiatequest_start, cr.Id);
    if(!valid(var) || var.GetValue() != 15)
        return;
    var = 16;
}

void r_GiveKey(Critter& player, Critter@ npc)
{
    GameVar@ var2 = GetLocalVar(LVAR_q_bos_initiatequest_start_key, player.Id);
    Item@    item = player.AddItem(PID_KEY, 1);
    var2 = item.Id;
    item.LockerId = 0;
}

void _Chris(Critter& cr, bool firstTime)
{
    cr.SetEvent(CRITTER_EVENT_SMTH_USE_SKILL, "_ChrisUseSkillOn");
    cr.SetEvent(CRITTER_EVENT_DEAD, "_ChrisDead");
}

void _ChrisUseSkillOn(Critter& cr, Critter& fromCr, int skill, Critter@ onCritter, Item@ onItem, Scenery@ onScenery)
{
    if(!valid(onCritter) || onCritter.Id != cr.Id)
        return;
    if(skill != SK_STEAL)
        return;
    GameVar@ var = GetLocalVar(LVAR_q_bos_initiatequest_start, fromCr.Id);
    if(!valid(var) || var.GetValue() != 12)
        return;
    GameVar@ var2 = GetLocalVar(LVAR_q_bos_initiatequest_start_key, fromCr.Id);
    if(!valid(var2) || var2.GetValue() != 0)
        return;
    int sk = fromCr.Skill[SK_STEAL];
    sk = CLAMP(sk, 5, 95);
    if(sk >= Random(1, 100))
    {
        Item@ item = fromCr.AddItem(PID_KEY, 1);
        var2 = item.Id;
        item.LockerId = 0;
        fromCr.Say(SAY_NETMSG, "You manage to slip your hand under Chris's robe and take the key from his pocket.");
        return;
    }

    fromCr.Say(SAY_NETMSG, "Despite having to put your hand under Chris's robe, you didn't find a key. Now you just feel dirty.");
    var2 = -1;
}


void _ChrisDead(Critter& cr, Critter@ killer)
{
    if(!valid(killer) || killer.IsNpc())
        return;
    GameVar@ var = GetLocalVar(LVAR_q_bos_initiatequest_start, killer.Id);
    if(!valid(var) || var.GetValue() != 12)
        return;
    var = 999;
    CreateTimeEvent(AFTER(REAL_HOUR(5)), "e_ResetVar", killer.Id, true);
}

void _FenceDoor(Item& item, bool firstTime)
{
    item.SetEvent(ITEM_EVENT_SKILL, "_FenceDoorSkill");
}

bool _FenceDoorSkill(Item& item, Critter& crit, int skill)
{
    if(skill != -1)
        return false;
    if(crit.IsNpc())
        return false;
    if(crit.Dir != 2)
    {
        GameVar@ var = GetLocalVar(LVAR_q_bos_initiatequest_start, crit.Id);
        if(!valid(var) || var.GetValue() != 12)
            return false;
        GameVar@ var2 = GetLocalVar(LVAR_q_bos_initiatequest_start_key, crit.Id);
        if(!valid(var2) || var2.GetValue() == 0)
            return false;
        Item@ it = crit.GetItemById(var2.GetValue());
        if(!valid(it) || it.GetProtoId() != PID_KEY)
            return false;
        DeleteItem(it);
    }
    if(FLAG(item.LockerCondition, LOCKER_ISOPEN))
        return false;
    LockerOpen(item);
    OnOpenContainer(item);
    return true;
}

void t_NukaColaMachine(Critter& player, Scenery& trigger, bool entered, uint8 dir)
{
    GameVar@ var = GetLocalVar(LVAR_q_bos_initiatequest_start, player.Id);
    if(!valid(var) || var.GetValue() != 12)
        return;
    // player.Say(SAY_NETMSG,"You see a Nuka-Cola machine. The great Brotherhood of Steel mystery has been solved.");
    var = 13;
}

uint e_ResetVar(array<uint>@ values)
{
    GameVar@ var = GetLocalVar(LVAR_q_bos_initiatequest_start, values[0]);
    if(valid(var) && var.GetValue() == 999)
        var = 12;
    return 0;
}
