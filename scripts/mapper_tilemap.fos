//
// FOnline: 2238
// Rotators
//
// mapper_tilemap.fos
//

#include "_mapper_defines.fos"
#include "_macros.fos"
#include "mapper_plugin_h.fos"
#include "_colors.fos"
#include "mapper_utils_h.fos"

#define COLOR_NORMAL    (0x60FF0000)
#define COLOR_WIDE      (0x6000FF00)

class Tile
{
    int         Hash;
    private int color;

    bool        Wide
    {
        set
        {
            if(value)
                color = COLOR_WIDE;
            else
                color = COLOR_NORMAL;
        }
    }

    Tile()
    {
        Hash = 0;
        Wide = false;
    }

    void Draw(uint16 hx)
    {
        if(Hash & (1 << 0) != 0)
            DrawHexRect2(0, 14, 6, 20, color, hx);
        if(Hash & (1 << 1) != 0)
            DrawHexRect2(6, 14, 14, 20, color, hx);
        if(Hash & (1 << 2) != 0)
            DrawHexRect2(14, 14, 20, 20, color, hx);
        if(Hash & (1 << 3) != 0)
            DrawHexRect2(0, 6, 6, 14, color, hx);
        if(Hash & (1 << 4) != 0)
            DrawHexRect2(14, 6, 20, 14, color, hx);
        if(Hash & (1 << 5) != 0)
            DrawHexRect2(0, 0, 6, 6, color, hx);
        if(Hash & (1 << 6) != 0)
            DrawHexRect2(6, 0, 14, 6, color, hx);
        if(Hash & (1 << 7) != 0)
            DrawHexRect2(14, 0, 20, 6, color, hx);
    }
};

class CTileMapPlugin : IMapperPlugin
{
    bool                Active;
    private array<Tile> arr;

    CTileMapPlugin()
    {
        Active = false;
    }

    void Render(uint layer)
    {
        if(!Active || layer != 1)
            return;
        if(!valid(GetActiveMap()))
            return;

        DrawText("Tiled presets: " + arr.length(), 5, 5, 200, 20, COLOR_RED, FONT_FALLOUT, FT_BORDERED);
        UpdateOffsets();

        for(uint i = 0; i < arr.length(); i++)
            arr[i].Draw(22 * i);
    }

    bool Init()
    {
        file f;
        if(f.open(__ServerPath + "/maps/TileMaps/block.txt", "r") < 0)
        {
            Message("Could not open file " + __ServerPath + "/maps/TileMaps/block.txt");
            return false;
        }

        string str;
        while(!f.isEndOfFile())
        {
            int n = f.readLine(str);
            if(n == 0)
                continue;
            Tile t;
            if(str[0] == 'W' || str[0] == 'n' || str[0] == 'e' || str[0] == 's' || str[0] == 'w')
            {
                t.Wide = true;
                str = substring(str, 1, str.length() - 1);
            }
            if(str.length() < 8)
            {
                Message("Invalid block data, length " + str.length());
                return false;
            }
            for(int i = 0; i < 8; i++)
                if(str[i] == '1')
                    t.Hash += (1 << (7 - i));

            arr.insertLast(t);
        }

        return true;
    }

    void RenderMap()         {}
    bool MouseDown(int)      { return false; }
    bool MouseUp(int)        { return false; }
    void MouseMove(int, int) {}
    bool KeyDown(uint8)      { return false; }
    bool KeyUp(uint8)        { return false; }
    void InputLost()         {}
    void Loop()              {}
    bool Message(string&)    { return false; }
};

void DrawHexRect2(uint16 x1, uint16 y1, uint16 x2, uint16 y2, int color, uint16 offsetX)
{
    DrawHexRect(x1 + offsetX, y1, x2 + offsetX, y2, color);
}

void DrawHexRect(uint16 x1, uint16 y1, uint16 x2, uint16 y2, int color)
{
    array<int> data(12);
    int idx = 0;
    FillDataHex(data, x1, y1, idx, color);
    FillDataHex(data, x1, y2, idx, color);
    FillDataHex(data, x2, y1, idx, color);
    FillDataHex(data, x2, y2, idx, color);
    DrawPrimitive(DRAW_PRIMITIVE_TRIANGLESTRIP, data);
}

int offX = 0;
int offY = 0;

void UpdateOffsets()
{
    int x1 = 0;
    int y1 = 0;
    int x2 = 0;
    int y2 = 0;
    GetHexPos(1, 1, x1, y1);
    GetHexPos(1, 2, x2, y2);
    offX = x1 - x2;
    offY = y1 - y2;
}

void FillDataHex(array<int>& data, uint16 x, uint16 y, int& index, int color)
{
    int px = 0;
    int py = 0;
    GetHexPos(x, y, px, py);
    data[index++] = px + offX;
    data[index++] = py + offY;
    data[index++] = color;
}

CTileMapPlugin@ Plugin = null;

void RegisterTilemap() // export
{
    @Plugin = @CTileMapPlugin();
    if(Plugins_Register(Plugin))
        Message("Tile presets overlay loaded, type #mapper_tilemap@toggle to activate or deactivate it.");
}

bool Init = false;

string toggle(string)
{
    if(!Init)
    {
        Init = Plugin.Init();
        if(!Init)
            return "Initialization failure";
    }
    Plugin.Active = !Plugin.Active;
    return "Overlay " + (Plugin.Active ? "enabled" : "disabled");
}
