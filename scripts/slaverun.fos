//
// FOnline: 2238
// Rotators
//
// slaverun.fos
//

// Slavers' Guild slave runs script.
// List of involved files:
//
// map_slaverun.fos           - map script for slaverun locations
// slaverun.fos               - main slave run mechanics
// slaverun_dialog.fos        - mostly Metzger's dialog demand and results
// slaverun_h.fos             - header script with macros and consts
// slaverun_init.fos          - an inlined file with slave run definitions
// slaverun_slave_hostile.fos - critter script for hostile slaves
// slaverun_slave_normal.fos  - critter script for nonhostile slaves
// slaverun_slaver.fos        - critter script for slavers

#include "_macros.fos"

#include "_ai.fos"
#include "entire.fos"
#include "follower_common_h.fos"
#include "slaverun_h.fos"
#include "groups_h.fos"
#include "_scripts.fos"
#include "utils_h.fos"

#define HOSTILES    (1)
#define NORMALS     (2)
#define SLAVERS     (5)

// now it's the time for the most ugly macro ever:
#define TAKEENTIRES                                                              \
    # (arr, max, current)array<uint> arr(max); for(int __i = 0; __i < max; __i++) \
        arr[__i] = __i; for(int __i = 0; __i < current; __i++) { newindex = Random(__i, max - 1); temp = arr[__i]; arr[__i] = arr[newindex]; arr[newindex] = temp; }

import bool AddAttackPlane(Critter& npc, uint priority, Critter& target) from "npc_planes";

shared interface ISlaverunLoc
{
    ISlaverunLoc@ SetLocPid(uint pid);
    uint          GetLocPid();
    ISlaverunLoc@ SetCoords(uint x1, uint y1, uint x2, uint y2);
    ISlaverunLoc@ SetReward(uint reward);
    ISlaverunLoc@ SetLevels(uint hlevel, uint nlevel, uint slevel);
    ISlaverunLoc@ SetNoItems();
    uint          GetReward();
    ISlaverunLoc@ AddHostile(uint pid);
    ISlaverunLoc@ AddNormal(uint pid);
    ISlaverunLoc@ Scripts(string& script1, string& script2);
    ISlaverunLoc@ AIPacks(uint pack1, uint pack2);
    ISlaverunLoc@ Dialogs(uint dialog1, uint dialog2, uint sdialog);
    ISlaverunLoc@ AddWeapon(uint pid, uint ammo, uint min, uint max);
    ISlaverunLoc@ AddItem(uint pid, uint chance, uint min, uint max);
    ISlaverunLoc@ AddContItem(uint pid, uint chance, uint min, uint max);
    bool          SpawnHostile(Map@ map, uint16 hexX, uint16 hexY);
    bool          SpawnNormal(Map@ map, uint16 hexX, uint16 hexY);
    void          FillContainer(Map@ map, uint16 hexX, uint16 hexY);
    bool          SpawnSlaver(Map@ map, uint16 hexX, uint16 hexY, uint teamId);
    uint          Create(Critter@ player);
};


class SlaverunLoc : ISlaverunLoc
{
    uint        LocPid;
    uint        X1;
    uint        Y1;
    uint        X2;
    uint        Y2;
    array<uint> Hostiles;
    array<uint> Normals;
    string      Hscript;
    string      Nscript;
    uint        Hpack;
    uint        Npack;
    uint        Hdialog;
    uint        Ndialog;
    uint        Sdialog;
    uint        Hlevel;
    uint        Nlevel;
    uint        Slevel;
    uint        Reward;
    bool        NoItems;
    array<uint> Weaps;       // pid, ammo, min, max
    array<uint> Items;       // pid, chance, min, max
    array<uint> ContItems;   // pid, chance, min, max

    SlaverunLoc()
    {
        LocPid = 0;
        X1 = 0;
        Y1 = 0;
        X2 = 0;
        Y2 = 0;
        Hscript = "";
        Nscript = "";
        Hpack = 0;
        Npack = 0;
        Hdialog = 0;
        Ndialog = 0;
        Sdialog = 0;
        Hlevel = 0;
        Nlevel = 0;
        Slevel = 0;
        Reward = 0;
        NoItems = false;
    }

    ISlaverunLoc@ SetLocPid(uint pid)
    {
        LocPid = pid;
        return this;
    }

    ISlaverunLoc@ SetCoords(uint x1, uint y1, uint x2, uint y2)
    {
        X1 = x1;
        Y1 = y1;
        X2 = x2;
        Y2 = y2;
        return this;
    }

    ISlaverunLoc@ SetReward(uint reward)
    {
        Reward = reward;
        return this;
    }

    ISlaverunLoc@ SetLevels(uint hlevel, uint nlevel, uint slevel)
    {
        Hlevel = hlevel;
        Nlevel = nlevel;
        Slevel = slevel;
        return this;
    }

    ISlaverunLoc@ SetNoItems()
    {
        NoItems = true;
        return this;
    }

    uint GetLocPid()
    {
        return LocPid;
    }

    uint GetReward()
    {
        return Reward;
    }

    ISlaverunLoc@ AddHostile(uint pid)
    {
        Hostiles.insertLast(pid);
        return this;
    }

    ISlaverunLoc@ AddNormal(uint pid)
    {
        Normals.insertLast(pid);
        return this;
    }

    ISlaverunLoc@ Scripts(string& script1, string& script2)
    {
        Hscript = script1;
        Nscript = script2;
        return this;
    }

    ISlaverunLoc@ AIPacks(uint pack1, uint pack2)
    {
        Hpack = pack1;
        Npack = pack2;
        return this;
    }

    ISlaverunLoc@ Dialogs(uint dialog1, uint dialog2, uint sdialog)
    {
        Hdialog = dialog1;
        Ndialog = dialog2;
        Sdialog = sdialog;
        return this;
    }

    ISlaverunLoc@ AddWeapon(uint pid, uint ammo, uint min, uint max)
    {
        Weaps.insertLast(pid);
        Weaps.insertLast(ammo);
        Weaps.insertLast(min);
        Weaps.insertLast(max);
        return this;
    }

    ISlaverunLoc@ AddItem(uint pid, uint chance, uint min, uint max)
    {
        Items.insertLast(pid);
        Items.insertLast(chance);
        Items.insertLast(min);
        Items.insertLast(max);
        return this;
    }

    ISlaverunLoc@ AddContItem(uint pid, uint chance, uint min, uint max)
    {
        ContItems.insertLast(pid);
        ContItems.insertLast(chance);
        ContItems.insertLast(min);
        ContItems.insertLast(max);
        return this;
    }

    bool SpawnHostile(Map@ map, uint16 hexX, uint16 hexY)
    {
        if(Hostiles.length() == 0)
        {
            Log("No hostiles found");
            return false;
        }

        int      pid = random_from_array(Hostiles);
        Critter@ npc = AddNpc(map, pid, hexX, hexY, Random(0, 5), Hdialog, Hscript, Hpack, 1, TEAM_Mob0, false, Hlevel);     // TODO: levels?
        if(!valid(npc))
            return false;

        npc.StatBase[ST_REPLICATION_TIME] = REPLICATION_DELETE;

        if(Weaps.length() == 0)
        {
            Log("No weapons found");
            return true;
        }

        int weap = 4 * Random(0, (Weaps.length()) / 4 - 1);

        if(Weaps[weap] != 0)     // i.e. not hands
        {
            // add weapon, move to hands
            Item@ item = npc.AddItem(Weaps[weap], 1);
            npc.SetFavoriteItem(SLOT_HAND1, Weaps[weap]);
            npc.MoveItem(item.Id, 1, SLOT_HAND1);

            // add ammo
            if(Weaps[weap + 1] != 0)
                npc.AddItem(Weaps[weap + 1], Random(Weaps[weap + 2], Weaps[weap + 3]));
        }

        _CritSetExtMode(npc, MODE_EXT_NO_SLAVE);

        if(NoItems)
            return true;

        // add other items
        uint items = Items.length() / 4;
        for(uint i = 0; i < items; i++)
            if(uint(Random(1, 100)) <= Items[4 * i + 1])
                npc.AddItem(Items[4 * i], Random(Items[4 * i + 2], Items[4 * i + 3]));


        return true;
    }

    bool SpawnNormal(Map@ map, uint16 hexX, uint16 hexY)
    {
        if(Normals.length() == 0)
        {
            Log("No normals found");
            return false;
        }

        int      pid = random_from_array(Normals);
        Critter@ npc = AddNpc(map, pid, hexX, hexY, Random(0, 5), Ndialog, Nscript, Npack, 1, TEAM_Mob1, false, Nlevel);     // TODO: levels?
        if(!valid(npc))
            return false;

        npc.StatBase[ST_REPLICATION_TIME] = REPLICATION_DELETE;

        // add other items
        uint items = Items.length() / 4;
        for(uint i = 0; i < items; i++)
            if(uint(Random(1, 100)) <= Items[4 * i + 1])
                npc.AddItem(Items[4 * i], Random(Items[4 * i + 2], Items[4 * i + 3]));

        _CritSetExtMode(npc, MODE_EXT_NO_SLAVE);
        return true;
    }

    void FillContainer(Map@ map, uint16 hexX, uint16 hexY)
    {
        array<Item@> items;
        map.GetItems(hexX, hexY, items);
        for(uint i = 0, j = items.length(); i < j; i++)
            if(items[i].GetType() == ITEM_TYPE_CONTAINER)
            {
                uint contitems = ContItems.length() / 4;
                for(uint k = 0; k < contitems; k++)
                    if(uint(Random(1, 100)) <= ContItems[4 * k + 1])
                        items[i].AddItem(ContItems[4 * k], Random(ContItems[4 * k + 2], ContItems[4 * k + 3]), 0);
                break;
            }
    }

    bool SpawnSlaver(Map@ map, uint16 hexX, uint16 hexY, uint teamId)   // this one is somewhat hardcoded
    {
        // pid 217
        uint[] weaps = { PID_SHOTGUN, PID_SAWED_OFF_SHOTGUN, PID_HUNTING_RIFLE, PID_10MM_PISTOL, PID_DESERT_EAGLE };
        uint[] ammos = { PID_SHOTGUN_SHELLS, PID_SHOTGUN_SHELLS, PID_223_FMJ, PID_10MM_JHP, PID_44_MAGNUM_JHP };
        uint[] min = { 5, 5, 5, 8, 7 };
        uint[] max = { 10, 10, 10, 16, 14 };
        uint     num = Random(0, 4);
        Critter@ npc = AddNpc(map, SLAVERUN_PID_SLAVER, hexX, hexY, Random(0, 5), Sdialog, SCRIPT_slaverun_slaver, AIPACKET_SLAVER, 1, teamId, false, Slevel);
        if(!valid(npc))
            return false;

        // choose and add weapon
        uint  weapnum = Random(0, weaps.length() - 1);
        Item@ item = npc.AddItem(weaps[weapnum], 1);
        npc.SetFavoriteItem(SLOT_HAND1, weaps[weapnum]);
        npc.MoveItem(item.Id, 1, SLOT_HAND1);

        // add ammo
        npc.AddItem(ammos[weapnum], Random(min[weapnum], max[weapnum]));

        npc.StatBase[ST_REPLICATION_TIME] = REPLICATION_DELETE;
        _CritSetExtMode(npc, MODE_EXT_NO_SLAVE);   // hehe
        return true;
    }

    uint Create(Critter@ player)
    {
        Critter@[] crits = { player };
        int loc = CreateLocation(LocPid, Random(X1, X2), Random(Y1, Y2), crits);
        if(loc == 0)
            return 0;
        if(player.Mode[MODE_DEFAULT_COMBAT] == COMBAT_MODE_TURN_BASED)
            SetTurnBasedAvailability(GetLocation(loc));

        return loc;
    }
};

array<ISlaverunLoc@> SlaverunLocs;

void InitSlaveruns() // Export
{
    #include "slaverun_init.fos"
}

void FillMap(Map@ map, uint& hostiles, uint& normals, uint& slavers, uint teamId)
{
    array<Entire> ent_slaver;
    array<Entire> ent_slave_n;
    array<Entire> ent_slave_h;
    array<Entire> ent_cont;
    array<Entire> ent_gecko;
    array<Entire> ent_brahmin;
    SlaveLog("Slaverun " + map.GetLocation().Id + " fillmap, taking entires.");
    int           slaver_max = ParseEntires(map, ent_slaver, ENTIRE_SLAVERUN_SLAVER);
    int           slave_n_max = ParseEntires(map, ent_slave_n, ENTIRE_SLAVERUN_SLAVE_N);
    int           slave_h_max = ParseEntires(map, ent_slave_h, ENTIRE_SLAVERUN_SLAVE_H);
    int           cont_max = ParseEntires(map, ent_cont, ENTIRE_SLAVERUN_CONT);
    int           gecko_max = ParseEntires(map, ent_gecko, ENTIRE_SLAVERUN_GECKO);
    int           brahmin_max = ParseEntires(map, ent_brahmin, ENTIRE_SLAVERUN_BRAHMIN);
    SlaveLog("slaver_max: " + slaver_max);
    SlaveLog("slave_n_max: " + slave_n_max);
    SlaveLog("slave_h_max: " + slave_h_max);
    SlaveLog("cont_max: " + cont_max);
    SlaveLog("gecko_max: " + gecko_max);
    SlaveLog("brahmin_max: " + brahmin_max);
    // levels:
    // min-40%
    // 30-70%
    // 60-100%

    uint level = Random(1, 3);
    int  num_slaver;
    int  num_slave_n;
    int  num_slave_h;
    int  num_brahmin;

    if(level == 1)
    {
        num_slaver = Random(1, (2 * (slaver_max + 1)) / 5) - 1;
        num_slave_n = Random(1, (2 * slave_n_max) / 5);
        num_slave_h = Random(1, (2 * slave_h_max) / 5);
        num_brahmin = Random(1, (2 * brahmin_max) / 5);
    }
    else if(level == 2)
    {
        num_slaver = Random((3 * (slaver_max + 1)) / 10, (7 * (slaver_max + 1)) / 10) - 1;
        num_slave_n = Random((3 * slave_n_max) / 10, (7 * slave_n_max) / 10);
        num_slave_h = Random((3 * slave_h_max) / 10, (7 * slave_h_max) / 10);
        num_brahmin = Random((3 * brahmin_max) / 10, (7 * brahmin_max) / 10);
    }
    else
    {
        num_slaver = Random((3 * (slaver_max + 1)) / 5, slaver_max + 1) - 1;
        num_slave_n = Random((3 * slave_n_max) / 5, slave_n_max);
        num_slave_h = Random((3 * slave_h_max) / 5, slave_h_max);
        num_brahmin = Random((3 * brahmin_max) / 5, brahmin_max);
    }

    if(num_slaver < 1)
        num_slaver = 1;
    if(num_slave_n < 1)
        num_slave_n = 1;
    if(num_slave_h < 1)
        num_slave_h = 1;
    if(num_brahmin < 1 && brahmin_max != 0)
        num_brahmin = 1;
    if(brahmin_max == 0)
        num_brahmin = 0;

    SlaveLog("Level " + level);
    SlaveLog("num_slaver: " + num_slaver);
    SlaveLog("num_slave_n: " + num_slave_n);
    SlaveLog("num_slave_h: " + num_slave_h);
    SlaveLog("num_brahmin: " + num_brahmin);

    // take appropriate number of random entires

    uint temp;
    uint newindex;
    SlaveLog("TAKEENTIRES slaver");
    TAKEENTIRES(slaver_ind, slaver_max, num_slaver);
    SlaveLog("TAKEENTIRES n");
    TAKEENTIRES(slave_n_ind, slave_n_max, num_slave_n);
    SlaveLog("TAKEENTIRES h");
    TAKEENTIRES(slave_h_ind, slave_h_max, num_slave_h);
    SlaveLog("TAKEENTIRES brahmin");
    /*if (brahmin_max != 0)*/ TAKEENTIRES(brahmin_ind, brahmin_max, num_brahmin);

    SlaveLog("TAKEENTIRES OK");

    bool found = false;
    uint slaveloc = 0;
    uint locprotoid = map.GetLocation().GetProtoId();
    // Log("findloc");
    for(uint i = 0, j = SlaverunLocs.length(); i < j; i++)
        if(SlaverunLocs[i].GetLocPid() == locprotoid)
        {
            slaveloc = i;
            found = true;
            break;
        }

    if(!found)
    {
        Log("Slaverun location PID not found");
        return;
    }
    SlaveLog("loc found!");
    ISlaverunLoc@ slaverun = SlaverunLocs[slaveloc];
    SlaveLog("loc taken.");
    hostiles = num_slave_h;
    normals = num_slave_n;
    slavers = num_slaver;

    for(int i = 0; i < num_slaver; i++)
    {
        Entire@ ent = ent_slaver[slaver_ind[i]];
        if(!slaverun.SpawnSlaver(map, ent.HexX, ent.HexY, teamId))
            slavers--;
        // Log("SLAVER added.");
    }
    SlaveLog("slavers added");

    for(int i = 0; i < num_slave_h; i++)
    {
        Entire@ ent = ent_slave_h[slave_h_ind[i]];
        if(!slaverun.SpawnHostile(map, ent.HexX, ent.HexY))
            hostiles--;
        // Log("HOSTILE added.");
    }
    SlaveLog("hostiles added");

    for(int i = 0; i < num_slave_n; i++)
    {
        Entire@ ent = ent_slave_n[slave_n_ind[i]];
        if(!slaverun.SpawnNormal(map, ent.HexX, ent.HexY))
            normals--;
        // Log("NORMAL added.");
    }
    SlaveLog("normals added");

    for(int i = 0; i < num_brahmin; i++)
    {
        Entire@  ent = ent_brahmin[brahmin_ind[i]];
        Critter@ npc = AddNpc(map, 10, ent.HexX, ent.HexY, Random(0, 5), 5055 /*brahmin dialog*/, SCRIPT_all_brahmin, AIPACKET_BRAHMIN, 1, TEAM_Neutral0, false, 1);     // TODO?
        npc.StatBase[ST_REPLICATION_TIME] = REPLICATION_DELETE;
        // Log("BRAHMIN added.");
    }
    SlaveLog("brahmin added");

    for(int i = 0; i < cont_max; i++)
    {
        Entire@ ent = ent_cont[i];
        slaverun.FillContainer(map, ent.HexX, ent.HexY);
        // Log("CONTAINER filled.");
    }
    SlaveLog("containers filled");

    for(int i = 0; i < gecko_max; i++)
    {
        Entire@  ent = ent_gecko[i];
        Critter@ npc = AddNpc(map, Random(1, 5) == 1 ? 83 : 80, ent.HexX, ent.HexY, Random(0, 5), 0, "", 0, 1, TEAM_Neutral1, false, 1);
        npc.StatBase[ST_REPLICATION_TIME] = REPLICATION_DELETE;
        npc.ToDead(Random(0, 1) == 1 ? ANIM2_DEAD_FRONT : ANIM2_DEAD_BACK, null);
        // Log("GECKO added.");
    }
    SlaveLog("geckos added");
    SlaveLog("Slaverun " + map.GetLocation().Id + " filled: S,H,N,B,C,G: " + slavers + ", " + hostiles + ", " + normals + ", " + num_brahmin + ", " + cont_max + ", " + gecko_max);
}


uint GetSlaverunLocLength()
{
    return SlaverunLocs.length();
}

uint SpawnSlaverunLocation(Critter@ player, uint num)
{
    return SlaverunLocs[num].Create(player);
}

void StartSlaverunCombat(Map@ map)
{
    if(map.GetData(MAP_DATA_SLAVERUN_COMBAT) == INITIALIZED)
        return;
    map.SetData(MAP_DATA_SLAVERUN_COMBAT, INITIALIZED);
    array<Critter@> crits;
    array<Critter@> hostiles;
    array<Critter@> slavers;   // including players and their followers

    uint            num = map.GetCritters(0, FIND_LIFE_AND_KO, crits);

    for(uint i = 0; i < num; i++)
    {
        if(crits[i].IsPlayer() || _IsFollower(crits[i]) || (crits[i].IsNpc() && crits[i].Karma[KARMA_SLAVER] > 0))
        {
            slavers.insertLast(crits[i]);
            continue;
        }
        if(crits[i].IsNpc() && (_CritHasExtMode(crits[i], MODE_EXT_SLAVE_HOSTILE)))
            hostiles.insertLast(crits[i]);
    }

    for(uint i = 0, hnum = hostiles.length(); i < hnum; i++)
        for(uint j = 0, snum = slavers.length(); j < snum; j++)
        {
            if(hostiles[i].IsNpc())
            {
                AddAttackPlane(hostiles[i], AI_PLANE_ATTACK_PRIORITY + Random(1, (slavers[j].IsPlayer() ? 30 : 10)), slavers[j]);
                hostiles[i].AddEnemyInStack(slavers[j].Id);
            }
            if(slavers[j].IsNpc())
            {
                AddAttackPlane(slavers[j], AI_PLANE_ATTACK_PRIORITY + Random(1, 10), hostiles[i]);
                slavers[j].AddEnemyInStack(hostiles[i].Id);
            }
            // Log("attacking pair: "+hostiles[i].Id+", "+slavers[j].Id);
        }
    // Log("Starting combat.");
}

void SlaversAnnounceSuccess(Map@ map)
{
    array<Critter@> crits;

    uint            num = map.GetCritters(0, FIND_LIFE_AND_KO | FIND_ONLY_NPC, crits);

    for(uint i = 0; i < num; i++)
        if(crits[i].Karma[KARMA_SLAVER] > 0)
        {
            crits[i].Say(SAY_NORM_ON_HEAD, (Random(0, 1) == 0 ? "It's over" : "Another job well done!"));
            crits[i].StatBase[ST_VAR1] = 1;
        }
        else if(_CritHasExtMode(crits[i], MODE_EXT_SLAVE_NORMAL))
            if(Random(0, 5) == 0)
                crits[i].Say(SAY_NORM_ON_HEAD, (Random(0, 1) == 0 ? "Oh no!" : "Please don't hurt me!"));
}

uint SlaverunLocationReward(uint num)
{
    return SlaverunLocs[num].GetReward();
}

// event for deleting map, if you are too late:
uint e_deleteMap(array<uint>@ values)
{
    _TIMEBEGIN;

    GameVar@ status = GetLocalVar(LVAR_slaverun_status, values[0]);
    uint     ustatus = status.GetValue();
    status = SLAVERUN_ACTIVE | SLAVERUN_TOO_LATE;

    Location@ loc = GetLocation(values[1]);

    if(valid(loc))
        DeleteLocation(loc.Id);

    _TIMEEND;
    return 0;
}

void SlaveLog(string& s)
{
    file f;
    f.open("slavelog.txt", "a");
    f.writeString(s + "\n");
    f.close();
}
