//
// FOnline: 2238
// Rotators
//
// elevators_h.fos
//

//
// Script for elevators, that interconnects Entire objects with triggers to be used
// as elevators on multi-level maps
//

// INCLUDE FILE

#ifndef __ELEVATOR__
#define __ELEVATOR__

#include "_macros.fos"
#include "entire.fos"
#include "utils_h.fos"

#ifndef __ELEVATORS_MODULE__
import void AddElevator(IElevator@ elevator) from "elevators";
import void HandleElevator(IElevator@ elevator, Critter& critter, bool) from "elevators";
#endif

//
// Describes elevator entrance/floor
//
class CFloor
{
    uint   MapId;
    uint8  EntireNum;
    uint16 HexX;
    uint16 HexY;
    CFloor(uint mapId, uint8 num)
    {
        this.MapId = mapId;
        this.EntireNum = num;
        Map@ map = GetMap(mapId);
        map.GetEntireCoords(EntireNum, 0, HexX, HexY);
    }
};

shared interface IElevatorOnMove
{
    bool OnMove(Critter@, uint&);
};

shared interface IElevator
{
    void       Transit(Critter& player, uint floor);
    IElevator@ AddFloor(uint mapId, uint8 entireNum);
    bool       IsInside(Critter& player);
    void       AddPlayer(Critter& player);
    void       RemovePlayer(Critter@ player);
    uint       GetCurrentLevel(Critter& player);
    void       PlaySound(Critter& player, int floor);
    void       Debug(Critter& player);
    void       SetOnMove(IElevatorOnMove@ callback);
    uint       get_Type();
};

class CElevator : IElevator
{
    array<CFloor> floors;
    // players (their ids) that are inside the elevator
    // usually one per floor
    array<uint>      players;
    // type of the elevator (descriptor number)
    uint             type;
    IElevatorOnMove@ onmove;
    uint get_Type() { return type; }
    // first floor number
    // uint base;
    // custom floors
    // uint[] levels;

    CElevator(uint type)
    {
        this.type = type;
        @onmove = null;
        // this.base = 0;
    }
    //
    // Creates elevator with first floor diff than 0
    //
//	CElevator(uint id, uint base)
//	{
//		this.id = id;
//		this.base = base;
//	}
    //
    // Creates elevator with custom floor numbers
    //
//	CElevator(uint id, uint[]& levels)
//	{
//		this.id = id;
//		this.base = 0;
//		this.levels = levels;
//	}
    //
    // Gets descriptor used in elevator gui window
    //
    uint GetDescriptor(Critter& cr)
    {
        return ELEVATOR_X(type, GetCurrentLevel(cr));
    }
    //
    // Number of floors
    //
    uint Floors()
    {
        return floors.length();
    }
    //
    // Returns floor number with regard to base
    //
//	uint GetLevel(uint level)
//	{
//		if(levels.length() == 0)
//			return base + level;
//		else
//			return levels[level];
//	}
    //
    // Gets current level for player
    //
    uint GetCurrentLevel(Critter& player)
    {
        for(uint i = 0, j = floors.length(); i < j; i++)
        {
            if(floors[i].MapId == player.GetMapId())
                return i;
        }
        return 0;
    }
    //
    // Checks if player is inside the elevator
    //
    bool IsInside(Critter& player)
    {
        // DLog("IsInside - length: " + players.length());
        for(uint i = 0; i < players.length(); i++)
        {
            // DLog("IsInside: " + players[i] + " vs " + player.Id);
            if(players[i] == player.Id)
                return true;
        }
        return false;
    }

    //
    // Put player inside the elevator
    //
    void AddPlayer(Critter& player)
    {
        for(uint i = 0; i < players.length(); i++)
        {
            // this shouldn't happen anyway
            if(players[i] == player.Id)
                return;
        }
        players.insertLast(player.Id);
    }
    //
    // Takes player out from elevator
    //
    void RemovePlayer(Critter@ player)
    {
        for(uint i = 0; i < players.length(); i++)
        {
            if(players[i] == player.Id)
            {
                players.removeAt(i);
                return;
            }
        }

    }
    //
    // Transits player to the given floor
    //
    void Transit(Critter& player, uint floor)
    {
        // remove player from elevator
        this.RemovePlayer(player);
        if(valid(onmove) && !onmove.OnMove(player, floor))
            return;
        CFloor@ dest = floors[floor];
        // only if destination differs from actual map
        if(player.GetMapId() != dest.MapId)
            player.TransitToMap(dest.MapId, dest.EntireNum);
    }
    void PlaySound(Critter& player, int floornum)
    {
        CFloor@ floor = floors[floornum];
        Map@    map = GetMap(floor.MapId);
        map.PlaySound("elevator.acm", floor.HexX, floor.HexY, 10);
    }
    //
    // Adds floor entrance to elevator
    //
    IElevator@ AddFloor(uint mapId, uint8 entireNum)
    {
        DLog("Adding floor for map: " + mapId + ", entireNum: " + entireNum);
        floors.insertLast(CFloor(mapId, entireNum));
        return this;
    }

    void Debug(Critter& player)
    {
        player.Say(SAY_NETMSG, "=== Elevator ===");
        for(uint i = 0; i < floors.length(); i++)
        {
            player.Say(SAY_NETMSG, "" + i + ", " + floors[i].MapId + "/" + floors[i].EntireNum);
        }
    }
    // Sets OnMove callback (returning false disallow moving, changing of target floor is possible)
    //
    void SetOnMove(IElevatorOnMove@ callback)
    {
        @onmove = callback;
    }
};


// Elevator that internally uses map PIDs not IDs (note: Add Floor still takes MapId as parameter!)
// Works only between maps in same location
// Mayck: "It's sorta improvized, I just needed something to use in quest locations (while not having elevator instance for each location instance)."


class CPidElevator : IElevator
{
    array<CPidFloor> floors;
    // players (their ids) that are inside the elevator
    // usually one per floor
    array<uint>      players;
    // type of the elevator (descriptor number)
    uint             type;
    IElevatorOnMove@ onmove;
    uint get_Type() { return type; }
    // first floor number
    // uint base;
    // custom floors
    // uint[] levels;

    CPidElevator(uint type)
    {
        this.type = type;
        @onmove = null;
        // this.base = 0;
    }
    //
    // Gets descriptor used in elevator gui window
    //
    uint GetDescriptor(Critter& cr)
    {
        return ELEVATOR_X(type, GetCurrentLevel(cr));
    }
    //
    // Number of floors
    //
    uint Floors()
    {
        return floors.length();
    }
    //
    // Gets current level for player
    //
    uint GetCurrentLevel(Critter& player)
    {
        for(uint i = 0, j = floors.length(); i < j; i++)
        {
            if(floors[i].MapPid == player.GetMapProtoId())
                return i;
        }
        return 0;
    }
    //
    // Checks if player is inside the elevator
    //
    bool IsInside(Critter& player)
    {
        // DLog("IsInside - length: " + players.length());
        for(uint i = 0; i < players.length(); i++)
        {
            // DLog("IsInside: " + players[i] + " vs " + player.Id);
            if(players[i] == player.Id)
                return true;
        }
        return false;
    }

    //
    // Put player inside the elevator
    //
    void AddPlayer(Critter& player)
    {
        for(uint i = 0; i < players.length(); i++)
        {
            // this shouldn't happen anyway
            if(players[i] == player.Id)
                return;
        }
        players.insertLast(player.Id);
    }
    //
    // Takes player out from elevator
    //
    void RemovePlayer(Critter@ player)
    {
        for(uint i = 0; i < players.length(); i++)
        {
            if(players[i] == player.Id)
            {
                players.removeAt(i);
                return;
            }
        }

    }
    //
    // Transits player to the given floor
    //
    void Transit(Critter& player, uint floor)
    {
        // remove player from elevator
        this.RemovePlayer(player);
        if(valid(onmove) && !onmove.OnMove(player, floor))
            return;
        CPidFloor@ dest = floors[floor];
        // only if destination differs from actual map
        if(player.GetMapProtoId() != dest.MapPid)
        {
            Location@ loc = GetLocationOf(player);
            if(valid(loc))
            {
                Map@ destinationMap = loc.GetMap(dest.MapPid);
                if(valid(destinationMap))
                    player.TransitToMap(destinationMap.Id, dest.EntireNum);
            }
        }
    }
    void PlaySound(Critter& player, int floornum)
    {
        CPidFloor@ floor = floors[floornum];
        Location@  loc = GetLocationOf(player);
        if(valid(loc))
        {
            Map@ map = loc.GetMap(floor.MapPid);
            map.PlaySound("elevator.acm", floor.HexX, floor.HexY, 10);
        }
    }
    //
    // Adds floor entrance to elevator
    //
    IElevator@ AddFloor(uint mapId, uint8 entireNum)
    {
        DLog("Adding floor for map: " + mapId + ", entireNum: " + entireNum);
        floors.insertLast(CPidFloor(mapId, entireNum));
        return this;
    }

    void Debug(Critter& player)
    {
        player.Say(SAY_NETMSG, "=== Elevator ===");
        for(uint i = 0; i < floors.length(); i++)
        {
            player.Say(SAY_NETMSG, "" + i + ", " + floors[i].MapPid + "/" + floors[i].EntireNum);
        }
    }
    // Sets OnMove callback (returning false disallow moving, changing of target floor is possible)
    //
    void SetOnMove(IElevatorOnMove@ callback)
    {
        @onmove = callback;
    }
};

class CPidFloor
{
    uint   MapPid;
    uint8  EntireNum;
    uint16 HexX;
    uint16 HexY;
    CPidFloor(uint mapId, uint8 num)
    {
        Map@ map = GetMap(mapId);
        this.MapPid = map.GetProtoId();
        this.EntireNum = num;
        map.GetEntireCoords(EntireNum, 0, HexX, HexY);
    }
};
#endif // __ELEVATOR__
