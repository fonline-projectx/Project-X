//
// FOnline: 2238
// Rotators
//
// prod_plant_tobacco.fos
//

#include "_macros.fos"
#include "production_h.fos"

#define TEXT          (3009)
#define TEXT_EMPTY    (3053)

int TotalCount = 0;

void item_init(Item& item, bool firstTime)
{
    item.SetEvent(ITEM_EVENT_SKILL, "_UseSkill");
    item.SetEvent(ITEM_EVENT_FINISH, "_Finish");
    if(firstTime)
        AMOUNT(item) = __TobaccoCapacity;
    TotalCount++;
    StartRegeneration(item, "e_Regen");
}
void _Finish(Item& item, bool)
{
    TotalCount--;
    ReduceCounter(PID_TOBACCO, COUNTER(item));
}
uint e_Regen(array<uint>@ values)
{
    Item@ item = GetItem(values[0]);
    if(!valid(item))
        return 0;
    Regenerate(item, PID_TOBACCO, __TobaccoCapacity, __TobaccoRegen, TotalCount);
    UpdatePic(item);
    return RegenerationInterval;
}
array<string@> NormalPics = { "art\\items\\tobacco1.fofrm", "art\\items\\tobacco2.fofrm" };
PicHashes NormalPicHashes(NormalPics);
array<string@> FarmedPics = { "art\\items\\tobacco3.fofrm" };
PicHashes FarmedPicHashes(FarmedPics);

void UpdatePic(Item& item)
{
    if(AMOUNT(item) == 0)
        item.PicMap = FarmedPicHashes.GetRandom();
    else
        item.PicMap = NormalPicHashes.GetRandom();
    item.Update();
}

class GatherCallback : IGatherCallback
{
    void Callback(Item& item, Critter&, Item@)
    {
        UpdatePic(item);
    }
};
GatherCallback Callback;

bool _UseSkill(Item& item, Critter& cr, int skill)
{
    if(skill == -1)
        return Gather(item, cr, null, PID_TOBACCO, __TobaccoBatch, TEXT, TEXT_EMPTY, Callback);
    return false;
}


void test(Critter& cr, int, int, int)
{
    Item@ it = cr.GetMap().AddItem(cr.HexX, cr.HexY, 1812, 1);
    it.SetScript("prod_plant_tobacco@item_init");
}
