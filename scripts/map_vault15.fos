//
// FOnline: 2238
// Rotators
//
// map_ares.fos
//

#include "_maps.fos"
#include "_vars.fos"
#include "_macros.fos"
#include "mapdata_h.fos"
#include "messages_h.fos"
#include "guard_h.fos"
#include "npc_common_h.fos"
#include "npc_planes_h.fos"
#include "utils_h.fos"
#include "elevators_h.fos"

// npc roles (defines distance mob will attack from))
#define ROLE_DEFAULT      (0)
#define ROLE_AGRESSIVE    (1)
#define ROLE_PASSIVE      (2)

// useful variables
#define ALERTED           # (cr)           (cr.StatBase[ST_VAR1]) // idle time is shorter if in that mode // note that it uses StatBase for read and write

// idle time in milseconds (normal is slower for performance issues)
#define IDLE_NORMAL       (5000)
#define IDLE_ALERTED      (1000)


// =============================================
// Super Mutants / Critter
// =============================================
void _Mob(Critter& mob, bool firstTime)
{
    mob.ModeBase[MODE_NO_LOOT] = 1;
    mob.ModeBase[MODE_NO_DROP] = 1;
    mob.ModeBase[MODE_NO_STEAL] = 1;
    mob.ModeBase[MODE_UNLIMITED_AMMO] = 1;
    _CritSetExtMode(mob, MODE_EXT_MOB);
    mob.SetEvent(CRITTER_EVENT_IDLE, "_MobIdle");
}

void _DontMove(Critter& mob, bool firstTime)
{
    _Mob(mob, firstTime);
    mob.SetEvent(CRITTER_EVENT_IDLE, "_MobIdle2");
}

// =============================================
// Mob script parts
// =============================================

// =============================================
// Checks if critter is within attack distance
// =============================================
void _MobIdle(Critter& mob)
{
    // the great optimizer
    if(!mob.IsLife())
    {
        mob.Wait(IDLE_NORMAL);
        return;
    }

    // check critters in sight
    array<Critter@> crits;
    // get visible players
    uint            num = mob.GetCritters(false, FIND_ONLY_PLAYERS | FIND_LIFE, crits);
    // mob.Say(SAY_NORM_ON_HEAD, ""+num);
    // check distance
    uint dist = GetDistance(mob);
    for(uint i = 0; i < num; i++)
    {
        if(GetCrittersDistantion(mob, crits[i]) > dist)
            continue;
        else
        {
            // attack
            mob.AddEnemyInStack(crits[i].Id);
            return;
        }
    }
    if(crits.length() > 0)
    {
        // MoveMob(mob, false);
        mob.Wait(IDLE_ALERTED);
    }
    else
    {
        MoveMob(mob, false);
        // mob.Say(SAY_NORM_ON_HEAD, "Don't care");
        mob.Wait(IDLE_NORMAL);
    }
}

// =============================================
// Critter stays on his spot, does not move randomly around.
// =============================================
void _MobIdle2(Critter& mob)
{
    // check critters in sight
    array<Critter@> crits;
    // get visible players
    uint            num = mob.GetCritters(false, FIND_ONLY_PLAYERS | FIND_LIFE, crits);
    // mob.Say(SAY_NORM_ON_HEAD, ""+num);
    // check distance
    uint dist = GetDistance(mob);
    for(uint i = 0; i < num; i++)
    {
        if(GetCrittersDistantion(mob, crits[i]) > dist)
            continue;
        else
        {
            // attack
            mob.AddEnemyInStack(crits[i].Id);
            return;
        }
    }
    if(ALERTED(mob) > 0)
    {
        // MoveMob(mob, false);
        mob.Wait(IDLE_ALERTED);
    }
    else
    {
        // MoveMob(mob, false);
        // mob.Say(SAY_NORM_ON_HEAD, "Don't care");
        mob.Wait(IDLE_NORMAL);
    }
}

void MoveMob(Critter& cr, bool run)
{
    int dist = Random(0, (cr.Stat[ST_NPC_ROLE] % 100 / 10));
    if(dist == 0)
    {
        cr.MoveRandom();
    }
    else
    {
        // bool AddWalkPlane(Critter& npc, uint priory, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint8 cut)
        uint16 hexX = cr.HexX;
        uint16 hexY = cr.HexY;
        cr.GetMap().MoveHexByDir(hexX, hexY, Random(0, 5), dist);
        AddWalkPlane(cr, 0, hexX, hexY, 0xff, run, 0);
    }
}

// =============================================
// Gets distance after which critter becomes agressive
// =============================================
uint GetDistance(Critter& cr)
{
    // TODO: damaged eye??
    uint base = __LookNormal + 3 * cr.Stat[ST_PERCEPTION];

    // switch works only for ints??
    int role = int(cr.Stat[ST_NPC_ROLE]);
    switch(role)
    {
    case ROLE_DEFAULT:
        // mob.Say(SAY_NORM, "" + base + "/" + 3 + "=" + base/3);
        return base / 3;
    case ROLE_AGRESSIVE:
        return base / 2;
    case ROLE_PASSIVE:
        return base / 4;
    }
    return base / 3;
}

// =============================================
// Alerts that oponent is near
// =============================================
void _MobShowCritter(Critter& cr, Critter& showCrit)
{
    if(showCrit.IsPlayer())
        ALERTED(cr) += 1;
}

void _MobHideCritter(Critter& cr, Critter& hideCrit)
{
    if(hideCrit.IsPlayer())
        ALERTED(cr) -= 1;
}