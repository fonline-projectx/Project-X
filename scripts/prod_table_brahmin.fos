//
// FOnline: 2238
// Rotators
//
// prod_table_brahmin.fos
//

#include "_macros.fos"
#include "production_h.fos"

#define TEXT_BUTCHERED     (3010)
#define TEXT_NEED_KNIFE    (3047)
#define TEXT_NONE_LEFT     (3050)

int TotalCount = 0;

void item_init(Item& item, bool firstTime)
{
    item.SetEvent(ITEM_EVENT_USE_ON_ME, "_UseItem");
    item.SetEvent(ITEM_EVENT_SKILL, "_Skill");
    item.SetEvent(ITEM_EVENT_FINISH, "_Finish");
    if(firstTime)
        AMOUNT(item) = __MeatCapacity;
    TotalCount++;
    StartRegeneration(item, "e_Regen");
}

uint e_Regen(array<uint>@ values)
{
    //Item@ item = GetItem(values[0]);
    //if(!valid(item))
    //    return 0;
    //Regenerate(item, PID_MEAT, __MeatCapacity, __MeatRegen, TotalCount);
	Item@ item = GetItem(values[0]);
    if(!valid(item))
    return 0;
    //Regenerate(item, PID_ELECTRONIC_PARTS, __ElectronicPartsCap, __ElectronicPartsRegen, ComputerCount);
	if(item.Val1<100) item.Val1=MIN(item.Val1+5,100);
    return RegenerationInterval;
}

void _Finish(Item& item, bool)
{
    TotalCount--;
    ReduceCounter(PID_MEAT, COUNTER(item));
}

bool _UseItem(Item& item, Critter& cr, Item@ itemUsed)
{
    uint pid = itemUsed.GetProtoId();
    if(pid == PID_KNIFE || pid == PID_COMBAT_KNIFE || pid == PID_LIL_JESUS_WEAPON)
    {
        return Gather(item, cr, itemUsed, PID_MEAT, cr.Perk[PE_SURVIVALIST] != 0 ? 2 * __MeatBatch : __MeatBatch,
                      TEXT_BUTCHERED, TEXT_NONE_LEFT, null);
    }
    return false;
}
bool _Skill(Item& item, Critter& cr, int)
{
    cr.SayMsg(SAY_NETMSG, TEXTMSG_TEXT, TEXT_NEED_KNIFE);
    return true;
}
