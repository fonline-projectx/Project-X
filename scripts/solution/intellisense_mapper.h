// Generated by FOnline Intellisense Creator for MSVC.
// Manual changes in this file will be lost if the program is run again.

// Used file:
// Mapper.exe

#define in
#define inout
#define out

// Type definitions
typedef unsigned long long uint64;
typedef unsigned int uint;
typedef unsigned short uint16;
typedef unsigned char uint8;
typedef long long int64;
typedef short int int16;
typedef signed char int8;
typedef void* unknown; // for anonymous types

// Forward declarations of global types
template <typename T> class array;
class string;
class any;
class dictionary;
class file;
class ProtoItem;
class MapperObject;
class MapperMap;

 // Global properties
string __ClientPath;
string __ServerPath;
bool __ShowCorners;
bool __ShowSpriteCuts;
bool __ShowDrawOrder;
bool __SplitTilesCollection;
bool __Quit;
bool __OpenGLDebug;
bool __AssimpLogging;
int __MouseX;
int __MouseY;
uint8 __RoofAlpha;
bool __HideCursor;
int __ScreenWidth;
int __ScreenHeight;
int __MultiSampling;
bool __DisableLMenu;
bool __DisableMouseEvents;
bool __DisableKeyboardEvents;
bool __HidePassword;
string __PlayerOffAppendix;
uint __DamageHitDelay;
int __CombatMessagesType;
bool __ShowTile;
bool __ShowRoof;
bool __ShowItem;
bool __ShowScen;
bool __ShowWall;
bool __ShowCrit;
bool __ShowFast;
bool __ShowPlayerNames;
bool __ShowNpcNames;
bool __ShowCritId;
bool __ScrollKeybLeft;
bool __ScrollKeybRight;
bool __ScrollKeybUp;
bool __ScrollKeybDown;
bool __ScrollMouseLeft;
bool __ScrollMouseRight;
bool __ScrollMouseUp;
bool __ScrollMouseDown;
bool __ShowGroups;
bool __HelpInfo;
bool __FullScr;
bool __VSync;
int __FlushVal;
int __BaseTex;
int __Light;
uint __ScrollDelay;
int __ScrollStep;
bool __MouseScroll;
bool __ScrollCheck;
string __FoDataPath;
string __Host;
uint __Port;
uint __ProxyType;
string __ProxyHost;
uint __ProxyPort;
string __ProxyUser;
string __ProxyPass;
string __Name;
uint __TextDelay;
bool __AlwaysOnTop;
int __FixedFPS;
bool __MsgboxInvert;
int __ChangeLang;
uint8 __DefaultCombatMode;
bool __MessNotify;
bool __SoundNotify;
int __IndicatorType;
uint __DoubleClickTime;
int __RunModMul;
int __RunModDiv;
int __RunModAdd;
bool __DisableDrawScreens;
uint __Animation3dSmoothTime;
uint __Animation3dFPS;
bool __MapZooming;
float __SpritesZoom;
float __SpritesZoomMin;
float __SpritesZoomMax;
float __EffectValue0;
float __EffectValue1;
float __EffectValue2;
float __EffectValue3;
float __EffectValue4;
float __EffectValue5;
float __EffectValue6;
float __EffectValue7;
float __EffectValue8;
float __EffectValue9;
bool __AlwaysRun;
uint __AlwaysRunMoveDist;
uint __AlwaysRunUseDist;
uint __CritterFidgetTime;
uint __Anim2CombatBegin;
uint __Anim2CombatIdle;
uint __Anim2CombatEnd;
bool __MapHexagonal;
int __MapHexWidth;
int __MapHexHeight;
int __MapHexLineHeight;
int __MapTileOffsX;
int __MapTileOffsY;
int __MapRoofOffsX;
int __MapRoofOffsY;
int __MapRoofSkipSize;
float __MapCameraAngle;
bool __MapSmoothPath;
string __MapDataPrefix;
int __GeometryType;
uint __HitAimEyes;
uint __HitAimHead;
uint __HitAimGroin;
uint __HitAimTorso;
uint __HitAimArms;
uint __HitAimLegs;
uint __EncounterTime;

 // Registered types declarations
template <typename T> class array
{
	T& opIndex(uint);
	T& operator [](uint); // created from the previous
	const T& opIndex(uint) const;
	const T& operator [](uint) const; // created from the previous
	array<T> & opAssign(const array<T> &in);
	array<T> & operator =(const array<T> &in); // created from the previous
	void insertAt(uint, const T&in);
	void removeAt(uint);
	void insertFirst(const T&in);
	void removeFirst();
	void insertLast(const T&in);
	void removeLast();
	uint length() const;
	void reserve(uint);
	void resize(uint);
	void grow(uint);
	void reduce(uint);
	void sortAsc();
	void sortAsc(uint, uint);
	void sortDesc();
	void sortDesc(uint, uint);
	void reverse();
	int find(const T&in) const;
	int find(uint, const T&in) const;
	bool opEquals(const array<T> &in) const;
	bool operator ==(const array<T> &in) const; // created from the previous
	bool isEmpty() const;
	T& first();
	const T& first() const;
	T& last();
	const T& last() const;
	uint get_length() const;
	void set_length(uint);
};

class string
{
	string& opAssign(const string&in);
	string& operator =(const string&in); // created from the previous
	string& opAddAssign(const string&in);
	string& operator +=(const string&in); // created from the previous
	bool opEquals(const string&in) const;
	bool operator ==(const string&in) const; // created from the previous
	int opCmp(const string&in) const;
	int operator <(const string&in) const; // created from the previous
	string@ opAdd(const string&in) const;
	string@ operator +(const string&in) const; // created from the previous
	uint8& opIndex(uint);
	uint8& operator [](uint); // created from the previous
	const uint8& opIndex(uint) const;
	const uint8& operator [](uint) const; // created from the previous
	uint length() const;
	void resize(uint);
	string& opAssign(double);
	string& operator =(double); // created from the previous
	string& opAddAssign(double);
	string& operator +=(double); // created from the previous
	string@ opAdd(double) const;
	string@ operator +(double) const; // created from the previous
	string@ opAdd_r(double) const;
	string& opAssign(float);
	string& operator =(float); // created from the previous
	string& opAddAssign(float);
	string& operator +=(float); // created from the previous
	string@ opAdd(float) const;
	string@ operator +(float) const; // created from the previous
	string@ opAdd_r(float) const;
	string& opAssign(int);
	string& operator =(int); // created from the previous
	string& opAddAssign(int);
	string& operator +=(int); // created from the previous
	string@ opAdd(int) const;
	string@ operator +(int) const; // created from the previous
	string@ opAdd_r(int) const;
	string& opAssign(uint);
	string& operator =(uint); // created from the previous
	string& opAddAssign(uint);
	string& operator +=(uint); // created from the previous
	string@ opAdd(uint) const;
	string@ operator +(uint) const; // created from the previous
	string@ opAdd_r(uint) const;
	string& opAssign(bool);
	string& operator =(bool); // created from the previous
	string& opAddAssign(bool);
	string& operator +=(bool); // created from the previous
	string@ opAdd(bool) const;
	string@ operator +(bool) const; // created from the previous
	string@ opAdd_r(bool) const;
};

class any
{
	any& opAssign(any&in);
	any& operator =(any&in); // created from the previous
	void store(unknown&in);
	void store(int64&in);
	void store(double&in);
	bool retrieve(unknown&out);
	bool retrieve(int64&out);
	bool retrieve(double&out);
};

class dictionary
{
	dictionary& opAssign(const dictionary&in);
	dictionary& operator =(const dictionary&in); // created from the previous
	void set(const string&in, unknown&in);
	bool get(const string&in, unknown&out) const;
	void set(const string&in, int64&in);
	bool get(const string&in, int64&out) const;
	void set(const string&in, double&in);
	bool get(const string&in, double&out) const;
	bool exists(const string&in) const;
	bool isEmpty() const;
	uint getSize() const;
	void delete(const string&in);
	void deleteAll();
	uint keys(array<string@> @) const;
};

class file
{
	bool mostSignificantByteFirst;
	int open(const string&in, const string&in);
	int close();
	int getSize() const;
	bool isEndOfFile() const;
	int readString(uint, string&out);
	int readLine(string&out);
	int64 readInt(uint);
	uint64 readUInt(uint);
	float readFloat();
	double readDouble();
	int writeString(const string&in);
	int writeInt(int64, uint);
	int writeUInt(uint64, uint);
	int writeFloat(float);
	int writeDouble(double);
	int getPos() const;
	int setPos(int);
	int movePos(int);
	string@ readWord();
	int readNumber();
	uint8 readUint8();
	uint16 readUint16();
	uint readUint32();
	uint64 readUint64();
	uint readData(uint count, array<uint8> &inout data); // Arguments for this function have been guessed
	bool writeUint8(uint8 data); // Arguments for this function have been guessed
	bool writeUint16(uint16 data); // Arguments for this function have been guessed
	bool writeUint32(uint);
	bool writeUint64(uint64 data); // Arguments for this function have been guessed
	bool writeData(array<uint8> &inout data, uint count); // Arguments for this function have been guessed
};

class ProtoItem
{
	const uint16 ProtoId;
	const int Type;
	const uint PicMap;
	const uint PicInv;
	const uint Flags;
	const bool Stackable;
	const bool Deteriorable;
	const bool GroundLevel;
	const int Corner;
	const int Dir;
	const uint8 Slot;
	const uint Weight;
	const uint Volume;
	const uint Cost;
	const uint StartCount;
	const uint8 SoundId;
	const uint8 Material;
	const uint8 LightFlags;
	const uint8 LightDistance;
	const int8 LightIntensity;
	const uint LightColor;
	const bool DisableEgg;
	const uint16 AnimWaitBase;
	const uint16 AnimWaitRndMin;
	const uint16 AnimWaitRndMax;
	const uint8 AnimStay_0;
	const uint8 AnimStay_1;
	const uint8 AnimShow_0;
	const uint8 AnimShow_1;
	const uint8 AnimHide_0;
	const uint8 AnimHide_1;
	const int16 OffsetX;
	const int16 OffsetY;
	const uint8 SpriteCut;
	const int8 DrawOrderOffsetHexY;
	const uint16 RadioChannel;
	const uint16 RadioFlags;
	const uint8 RadioBroadcastSend;
	const uint8 RadioBroadcastRecv;
	const uint8 IndicatorStart;
	const uint8 IndicatorMax;
	const uint HolodiskNum;
	const int StartValue_0;
	const int StartValue_1;
	const int StartValue_2;
	const int StartValue_3;
	const int StartValue_4;
	const int StartValue_5;
	const int StartValue_6;
	const int StartValue_7;
	const int StartValue_8;
	const int StartValue_9;
	const uint8 BlockLines;
	const uint16 ChildPid_0;
	const uint16 ChildPid_1;
	const uint16 ChildPid_2;
	const uint16 ChildPid_3;
	const uint16 ChildPid_4;
	const uint8 ChildLines_0;
	const uint8 ChildLines_1;
	const uint8 ChildLines_2;
	const uint8 ChildLines_3;
	const uint8 ChildLines_4;
	const bool Weapon_IsUnarmed;
	const int Weapon_UnarmedTree;
	const int Weapon_UnarmedPriority;
	const int Weapon_UnarmedMinAgility;
	const int Weapon_UnarmedMinUnarmed;
	const int Weapon_UnarmedMinLevel;
	const uint Weapon_Anim1;
	const uint Weapon_MaxAmmoCount;
	const int Weapon_Caliber;
	const uint16 Weapon_DefaultAmmoPid;
	const int Weapon_MinStrength;
	const int Weapon_Perk;
	const uint Weapon_ActiveUses;
	const int Weapon_Skill_0;
	const int Weapon_Skill_1;
	const int Weapon_Skill_2;
	const uint Weapon_PicUse_0;
	const uint Weapon_PicUse_1;
	const uint Weapon_PicUse_2;
	const uint Weapon_MaxDist_0;
	const uint Weapon_MaxDist_1;
	const uint Weapon_MaxDist_2;
	const uint Weapon_Round_0;
	const uint Weapon_Round_1;
	const uint Weapon_Round_2;
	const uint Weapon_ApCost_0;
	const uint Weapon_ApCost_1;
	const uint Weapon_ApCost_2;
	const bool Weapon_Aim_0;
	const bool Weapon_Aim_1;
	const bool Weapon_Aim_2;
	const uint8 Weapon_SoundId_0;
	const uint8 Weapon_SoundId_1;
	const uint8 Weapon_SoundId_2;
	const int Ammo_Caliber;
	const bool Door_NoBlockMove;
	const bool Door_NoBlockShoot;
	const bool Door_NoBlockLight;
	const uint Container_Volume;
	const bool Container_Changeble;
	const bool Container_CannotPickUp;
	const bool Container_MagicHandsGrnd;
	const uint16 Locker_Condition;
	const int Grid_Type;
	const uint Car_Speed;
	const uint Car_Passability;
	const uint Car_DeteriorationRate;
	const uint Car_CrittersCapacity;
	const uint Car_TankVolume;
	const uint Car_MaxDeterioration;
	const uint Car_FuelConsumption;
	const uint Car_Entrance;
	const uint Car_MovementType;
	const int RevealSneakers;
	const int NeedBlueprint;
	const int8 CraftLevel;
	const uint16 Misc_ChargeStart;
	const uint16 Misc_ChargeMax;
	const uint16 Misc_ToolSkillNum;
	const int Misc_ToolSkillBonus;
	const uint Armor_CrTypeMale;
	const uint Armor_CrTypeFemale;
	const int Armor_AC;
	const uint Armor_Perk;
	const int Armor_DRNormal;
	const int Armor_DRLaser;
	const int Armor_DRFire;
	const int Armor_DRPlasma;
	const int Armor_DRElectr;
	const int Armor_DREmp;
	const int Armor_DRExplode;
	const int Armor_DTNormal;
	const int Armor_DTLaser;
	const int Armor_DTFire;
	const int Armor_DTPlasma;
	const int Armor_DTElectr;
	const int Armor_DTEmp;
	const int Armor_DTExplode;
	const uint Armor_CrTypeMale2;
	const uint Armor_CrTypeMale3;
	const uint Armor_CrTypeMale4;
	const uint Armor_CrTypeFemale2;
	const uint Armor_CrTypeFemale3;
	const uint Armor_CrTypeFemale4;
	const int8 Armor_CMCritChance;
	const int8 Armor_CMCritPower;
	const int Weapon_DmgType_0;
	const int Weapon_DmgType_1;
	const int Weapon_DmgType_2;
	const uint Weapon_Anim2_0;
	const uint Weapon_Anim2_1;
	const uint Weapon_Anim2_2;
	const int Weapon_DmgMin_0;
	const int Weapon_DmgMin_1;
	const int Weapon_DmgMin_2;
	const int Weapon_DmgMax_0;
	const int Weapon_DmgMax_1;
	const int Weapon_DmgMax_2;
	const uint16 Weapon_Effect_0;
	const uint16 Weapon_Effect_1;
	const uint16 Weapon_Effect_2;
	const bool Weapon_Remove_0;
	const bool Weapon_Remove_1;
	const bool Weapon_Remove_2;
	const uint Weapon_ReloadAp;
	const int Weapon_UnarmedCriticalBonus;
	const uint Weapon_CriticalFailture;
	const bool Weapon_UnarmedArmorPiercing;
	const bool Weapon_NoRunning;
	const int Ammo_AcMod;
	const int Ammo_DrMod;
	const uint Ammo_DmgMult;
	const uint Ammo_DmgDiv;
	const uint8 Ammo_DTDiv;
	const int16 Blueprint_Param;
	const uint8 Blueprint_Id;
	const uint8 Blueprint_Level;
	const int8 Blueprint_Type;
	const uint8 Ingredient_Type_1;
	const uint16 Ingredient_Returns_1;
	const uint8 Ingredient_Type_2;
	const uint16 Ingredient_Returns_2;
	const uint8 Ingredient_Type_3;
	const uint16 Ingredient_Returns_3;
};

class MapperObject
{
	const uint8 MapObjType;
	const uint16 ProtoId;
	const uint16 MapX;
	const uint16 MapY;
	uint8 Dir;
	const uint UID;
	const uint ContainerUID;
	const uint ParentUID;
	const uint ParentChildIndex;
	uint LightColor;
	uint8 LightDay;
	uint8 LightDirOff;
	uint8 LightDistance;
	int8 LightIntensity;
	int UserData0;
	int UserData1;
	int UserData2;
	int UserData3;
	int UserData4;
	int UserData5;
	int UserData6;
	int UserData7;
	int UserData8;
	int UserData9;
	uint8 Critter_Anim1;
	uint8 Critter_Anim2;
	int16 Critter_ParamIndex0;
	int Critter_ParamValue0;
	int16 Critter_ParamIndex1;
	int Critter_ParamValue1;
	int16 Critter_ParamIndex2;
	int Critter_ParamValue2;
	int16 Critter_ParamIndex3;
	int Critter_ParamValue3;
	int16 Critter_ParamIndex4;
	int Critter_ParamValue4;
	int16 Critter_ParamIndex5;
	int Critter_ParamValue5;
	int16 Critter_ParamIndex6;
	int Critter_ParamValue6;
	int16 Critter_ParamIndex7;
	int Critter_ParamValue7;
	int16 Critter_ParamIndex8;
	int Critter_ParamValue8;
	int16 Critter_ParamIndex9;
	int Critter_ParamValue9;
	int16 Critter_ParamIndex10;
	int Critter_ParamValue10;
	int16 Critter_ParamIndex11;
	int Critter_ParamValue11;
	int16 Critter_ParamIndex12;
	int Critter_ParamValue12;
	int16 Critter_ParamIndex13;
	int Critter_ParamValue13;
	int16 Critter_ParamIndex14;
	int Critter_ParamValue14;
	int16 Critter_ParamIndex15;
	int Critter_ParamValue15;
	int16 Critter_ParamIndex16;
	int Critter_ParamValue16;
	int16 Critter_ParamIndex17;
	int Critter_ParamValue17;
	int16 Critter_ParamIndex18;
	int Critter_ParamValue18;
	int16 Critter_ParamIndex19;
	int Critter_ParamValue19;
	int16 Critter_ParamIndex20;
	int Critter_ParamValue20;
	int16 Critter_ParamIndex21;
	int Critter_ParamValue21;
	int16 Critter_ParamIndex22;
	int Critter_ParamValue22;
	int16 Critter_ParamIndex23;
	int Critter_ParamValue23;
	int16 Critter_ParamIndex24;
	int Critter_ParamValue24;
	int16 Critter_ParamIndex25;
	int Critter_ParamValue25;
	int16 Critter_ParamIndex26;
	int Critter_ParamValue26;
	int16 Critter_ParamIndex27;
	int Critter_ParamValue27;
	int16 Critter_ParamIndex28;
	int Critter_ParamValue28;
	int16 Critter_ParamIndex29;
	int Critter_ParamValue29;
	int16 Critter_ParamIndex30;
	int Critter_ParamValue30;
	int16 Critter_ParamIndex31;
	int Critter_ParamValue31;
	int16 Critter_ParamIndex32;
	int Critter_ParamValue32;
	int16 Critter_ParamIndex33;
	int Critter_ParamValue33;
	int16 Critter_ParamIndex34;
	int Critter_ParamValue34;
	int16 Critter_ParamIndex35;
	int Critter_ParamValue35;
	int16 Critter_ParamIndex36;
	int Critter_ParamValue36;
	int16 Critter_ParamIndex37;
	int Critter_ParamValue37;
	int16 Critter_ParamIndex38;
	int Critter_ParamValue38;
	int16 Critter_ParamIndex39;
	int Critter_ParamValue39;
	int16 OffsetX;
	int16 OffsetY;
	uint8 AnimStayBegin;
	uint8 AnimStayEnd;
	uint16 AnimWait;
	uint8 InfoOffset;
	uint Item_Count;
	uint8 Item_BrokenFlags;
	uint8 Item_BrokenCount;
	uint16 Item_Deterioration;
	uint8 Item_ItemSlot;
	uint16 Item_AmmoPid;
	uint Item_AmmoCount;
	uint Item_LockerDoorId;
	uint16 Item_LockerCondition;
	uint16 Item_LockerComplexity;
	int16 Item_TrapValue;
	int Item_Val0;
	int Item_Val1;
	int Item_Val2;
	int Item_Val3;
	int Item_Val4;
	int Item_Val5;
	int Item_Val6;
	int Item_Val7;
	int Item_Val8;
	int Item_Val9;
	bool Scenery_CanUse;
	bool Scenery_CanTalk;
	uint Scenery_TriggerNum;
	uint8 Scenery_ParamsCount;
	int Scenery_Param0;
	int Scenery_Param1;
	int Scenery_Param2;
	int Scenery_Param3;
	int Scenery_Param4;
	uint16 Scenery_ToMapPid;
	uint Scenery_ToEntire;
	uint8 Scenery_ToDir;
	uint8 Scenery_SpriteCut;
	void Update() const;
	MapperObject@ AddChild(uint16 pid); // Arguments for this function have been guessed
	uint GetChilds(array<MapperObject@> @ objects) const; // Arguments for this function have been guessed
	string@ get_ScriptName() const;
	void set_ScriptName(const string&inout name); // Arguments for this function have been guessed
	string@ get_FuncName() const;
	void set_FuncName(const string&inout name); // Arguments for this function have been guessed
	uint8 get_Critter_Cond() const;
	void set_Critter_Cond(uint8 value); // Arguments for this function have been guessed
	void MoveToHex(uint16 hexX, uint16 hexY); // Arguments for this function have been guessed
	void MoveToHexOffset(int x, int y); // Arguments for this function have been guessed
	void MoveToDir(uint8 dir); // Arguments for this function have been guessed
	string@ get_PicMap() const;
	void set_PicMap(const string&inout name); // Arguments for this function have been guessed
	string@ get_PicInv() const;
	void set_PicInv(const string&inout name); // Arguments for this function have been guessed
	int CritterCl_GetParam(uint16);
	void CritterCl_SetBaseType(uint);
	uint CritterCl_GetBaseType();
};

class MapperMap
{
	const uint16 Width;
	const uint16 Height;
	const int WorkHexX;
	const int WorkHexY;
	int Time;
	bool NoLogOut;
	MapperObject@ AddObject(uint16 hexX, uint16 hexY, int mapObjType, uint16 pid); // Arguments for this function have been guessed
	MapperObject@ GetObject(uint16 hexX, uint16 hexY, int mapObjType, uint16 pid, uint skip) const; // Arguments for this function have been guessed
	uint GetObjects(uint16 hexX, uint16 hexY, uint radius, int mapObjType, uint16 pid, array<MapperObject@> @ objects) const; // Arguments for this function have been guessed
	void UpdateObjects() const;
	void Resize(uint16 width, uint16 height); // Arguments for this function have been guessed
	uint GetTilesCount(uint16 hexX, uint16 hexY, bool roof) const; // Arguments for this function have been guessed
	void DeleteTile(uint16 hexX, uint16 hexY, bool roof, uint index); // Arguments for this function have been guessed
	uint GetTile(uint16 hexX, uint16 hexY, bool roof, uint index) const; // Arguments for this function have been guessed
	void AddTile(uint16 hexX, uint16 hexY, int offsX, int offsY, int layer, bool roof, uint picHash); // Arguments for this function have been guessed
	string@ GetTileName(uint16 hexX, uint16 hexY, bool roof, uint index) const; // Arguments for this function have been guessed
	void AddTileName(uint16 hexX, uint16 hexY, int offsX, int offsY, int layer, bool roof, string@ picName); // Arguments for this function have been guessed
	uint GetDayTime(uint dayPart) const; // Arguments for this function have been guessed
	void SetDayTime(uint dayPart, uint time); // Arguments for this function have been guessed
	void GetDayColor(uint dayPart, uint8&inout r, uint8&inout g, uint8&inout b) const; // Arguments for this function have been guessed
	void SetDayColor(uint dayPart, uint8 r, uint8 g, uint8 b); // Arguments for this function have been guessed
	string@ get_ScriptModule() const;
	void set_ScriptModule(const string&inout name); // Arguments for this function have been guessed
	string@ get_ScriptFunc() const;
	void set_ScriptFunc(const string&inout name); // Arguments for this function have been guessed
};


 // Global functions
string@ substring(const string&in, int, int);
int findFirst(const string&in, const string&in, int arg2 = 0);
int findLast(const string&in, const string&in, int arg2 = 0);
int findFirstOf(const string&in, const string&in, int arg2 = 0);
int findFirstNotOf(const string&in, const string&in, int arg2 = 0);
int findLastOf(const string&in, const string&in, int arg2 = 0);
int findLastNotOf(const string&in, const string&in, int arg2 = 0);
array<string@> @ split(const string&in, const string&in);
array<string@> @ splitEx(const string&in, const string&in);
string@ join(const array<string@> &in, const string&in);
string@ strlwr(const string&in);
string@ strupr(const string&in);
float cos(float);
float sin(float);
float tan(float);
float acos(float);
float asin(float);
float atan(float);
float atan2(float, float);
float cosh(float);
float sinh(float);
float tanh(float);
float log(float);
float log10(float);
float pow(float, float);
float sqrt(float);
float ceil(float);
float abs(float);
float floor(float);
float fraction(float);
void SetDefaultCritterParam(uint index, int param);
MapperMap@ LoadMap(string&inout fileName, int pathType);
void UnloadMap(MapperMap@ map);
bool SaveMap(MapperMap@ map, string&inout fileName, int pathType);
bool ShowMap(MapperMap@ map);
int GetLoadedMaps(array<MapperMap@> @ maps);
uint GetMapFileNames(string@ dir, array<string@> @ names);
void DeleteObject(MapperObject@ obj);
void DeleteObjects(array<MapperObject@> &inout objects);
void SelectObject(MapperObject@ obj, bool set);
void SelectObjects(array<MapperObject@> &inout objects, bool set);
MapperObject@ GetSelectedObject();
uint GetSelectedObjects(array<MapperObject@> @ objects);
uint TabGetTileDirs(int tab, array<string@> @ dirNames, array<bool> @ includeSubdirs);
uint TabGetItemPids(int tab, string@ subTab, array<uint16> @ itemPids);
uint TabGetCritterPids(int tab, string@ subTab, array<uint16> @ critterPids);
void TabSetTileDirs(int tab, array<string@> @ dirNames, array<bool> @ includeSubdirs);
void TabSetItemPids(int tab, string@ subTab, array<uint16> @ itemPids);
void TabSetCritterPids(int tab, string@ subTab, array<uint16> @ critterPids);
void TabDelete(int tab);
void TabSelect(int, string@, bool arg2 = false);
void TabSetName(int tab, string@ tabName);
bool IsCritterCanWalk(uint crType);
bool IsCritterCanRun(uint crType);
bool IsCritterCanRotate(uint crType);
bool IsCritterCanAim(uint crType);
bool IsCritterCanArmor(uint crType);
bool IsCritterAnim1(uint crType, uint anim1);
int GetCritterAnimType(uint crType);
uint GetCritterAlias(uint crType);
string@ GetCritterTypeName(uint crType);
string@ GetCritterSoundName(uint crType);
void GetHexCoord(uint16 fromHx, uint16 fromHy, uint16&inout toHx, uint16&inout toHy, float angle, uint dist);
uint GetPathLength(uint16 fromHx, uint16 fromHy, uint16 toHx, uint16 toHy, uint cut);
void Message(string&inout text);
void Message(int textMsg, uint strNum);
void MapMessage(string&inout text, uint16 hx, uint16 hy, uint timeMs, uint color, bool fade, int offsX, int offsY);
string@ GetMsgStr(int textMsg, uint strNum);
string@ GetMsgStr(int textMsg, uint strNum, uint skipCount);
uint GetMsgStrNumUpper(int textMsg, uint strNum);
uint GetMsgStrNumLower(int textMsg, uint strNum);
uint GetMsgStrCount(int textMsg, uint strNum);
bool IsMsgStr(int textMsg, uint strNum);
string@ ReplaceText(const string&inout text, const string&inout replace, const string&inout str);
string@ ReplaceText(const string&inout text, const string&inout replace, int i);
void MoveScreen(uint16 hexX, uint16 hexY, uint speed);
uint LoadSprite(string&inout name, int pathIndex);
uint LoadSprite(uint nameHash, uint8 dir);
int GetSpriteWidth(uint sprId, int sprIndex);
int GetSpriteHeight(uint sprId, int sprIndex);
uint GetSpriteCount(uint sprId);
void GetTextInfo(string&inout text, int w, int h, int font, int flags, int&inout tw, int&inout th, int&inout lines);
void DrawSprite(uint sprId, int sprIndex, int x, int y, uint color);
void DrawSprite(uint sprId, int sprIndex, int x, int y, uint color, bool applyOffsets);
void DrawSprite(uint sprId, int sprIndex, int x, int y, int w, int h, bool scratch, bool center, uint color);
void DrawSprite(uint sprId, int sprIndex, int x, int y, int w, int h, bool scratch, bool center, uint color, bool applyOffsets);
void DrawSpritePattern(uint sprId, int sprIndex, int x, int y, int w, int h, int sprWidth, int sprHeight, uint color);
void DrawText(string&inout text, int x, int y, int w, int h, uint color, int font, int flags);
void DrawPrimitive(int primitiveType, array<int> &inout data);
void DrawMapSprite(uint16 hx, uint16 hy, uint16 effectPid, uint sprId, int sprIndex, int offsX, int offsY);
void DrawCritter2d(uint crType, uint anim1, uint anim2, uint8 dir, int l, int t, int r, int b, bool scratch, bool center, uint color);
void DrawCritter3d(uint instance, uint crType, uint anim1, uint anim2, array<int> @ layers, array<float> @ position, uint color);
int GetKeybLang();
bool GetHexPos(uint16 hx, uint16 hy, int&inout x, int&inout y);
bool GetMonitorHex(int, int, uint16&inout, uint16&inout, bool arg4 = false);
MapperObject@ GetMonitorObject(int, int, bool arg2 = false);
void MoveHexByDir(uint16&inout hexX, uint16&inout hexY, uint8 dir, uint steps);
string@ GetIfaceIniStr(string&inout key);
bool LoadFont(int font, string&inout fontFileName);
void SetDefaultFont(int font, uint color);
void MouseClick(int x, int y, int button, int cursor);
void KeyboardPress(uint8 key1, uint8 key2);
void SetRainAnimation(string@ fallAnimName, string@ dropAnimName);
void Log(string&inout text);
string@ GetLastError();
int Random(int minimum, int maximum);
ProtoItem@ GetProtoItem(uint16 protoId);
bool StrToInt(string@ text, int&inout result);
bool StrToFloat(string@ text, float&inout result);
uint GetDistantion(uint16 hexX1, uint16 hexY1, uint16 hexX2, uint16 hexY2);
uint8 GetDirection(uint16 fromHexX, uint16 fromHexY, uint16 toHexX, uint16 toHexY);
uint8 GetOffsetDir(uint16 fromHexX, uint16 fromHexY, uint16 toHexX, uint16 toHexY, float offset);
uint GetTick();
uint GetAngelScriptProperty(int property);
void SetAngelScriptProperty(int property, uint value);
uint GetStrHash(string@ str);
bool LoadDataFile(string&inout dataFileName);
int GetConstantValue(int constCollection, string@ name);
string@ GetConstantName(int constCollection, int value);
void AddConstant(int constCollection, string@ name, int value);
bool LoadConstants(int constCollection, string@ fileName, int pathType);
void AllowSlot(uint8 index, string&inout slotName);
