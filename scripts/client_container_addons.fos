//
// FOnline: 2238
// Rotators
//
// client_container_volume.fos
//

#include "_client_defines.fos"
#include "_macros.fos"
#include "client_gui_h.fos"
#include "client_gui_ex.fos"
#include "sprite.fos"

# define FILTER_BUTTON_SELECTED_NONE    (-1)

InjectLabel@ insect;
int          itemsVolume = 0;
int          containerVolume = 0;
string       indicatorLabel;
uint         containerId;
uint         bodyId;
PickupShow@  pickupShow;
ButtonGroupPickup@ pickupGroupOwn;
ButtonGroupPickup@ pickupGroupOpp;
int   pickupFilterOwn = -1;
int   pickupFilterOpp = -1;


int GetPickupFilterOwn()
{
    return pickupFilterOwn;
}

int GetPickupFilterOpp()
{
    return pickupFilterOpp;
}

uint GetContainerId()
{
    return containerId;
}

uint GetBodyId()
{
    return bodyId;
}

void SetContainerBodyId(uint cId, uint bId)
{
    containerId = cId;
    bodyId = bId;
}

void UpdateCaption()
{
    // indicatorLabel="Container space: "+itemsVolume+"/"+containerVolume;
    indicatorLabel = "Space taken: " + (itemsVolume * 100 / (containerVolume == 0 ? 1 : containerVolume)) + "%";
    if(valid(insect))
        insect.SetCaption(indicatorLabel);
}

void HideVolumeIndicator()
{
    indicatorLabel = "";
    if(valid(insect))
    {
        insect.visible = false;
        insect.SetCaption(indicatorLabel);
    }
}

void ZeroVolumeFillIndicator()
{
    itemsVolume = 0;
    UpdateCaption();
}

void SetVolumeFillIndicator(array<ItemCl@> items)
{
    itemsVolume = 0;
    for(uint i = 0, j = items.length(); i < j; i++)
        itemsVolume += items[i].Proto.Volume * items[i].GetCount();
    UpdateCaption();
}

void SetVolumeIndicator(uint pid)
{
    ProtoItem@ container = GetProtoItem(pid);
    if(valid(container) && container.Type == ITEM_TYPE_CONTAINER)
    {
        containerVolume = container.Container_Volume;
        UpdateCaption();
        insect.visible = true;
    }
    else
        HideVolumeIndicator();
}

void InitContainerAddons()
{
    string         ini = "PupVolumeInd";
    string         txtIni = "PupVolumeIndText";

    IGUIScreenOpt@ pickupScreen = GUI_GetScreen(CLIENT_SCREEN_PICKUP);
    @insect = InjectLabel(pickupScreen);
    insect.PicPosition(ini);
    insect.TextPosition(txtIni);
    insect.SetFont(FONT_FALLOUT);
    insect.SetFormat(FT_CENTERY | FT_CENTERX);

    InjectPutAllButton@  insectPutAll = InjectPutAllButton(pickupScreen);
    InjectTakeAllButton@  insectTakeAll = InjectTakeAllButton(pickupScreen);

    @pickupGroupOwn = ButtonGroupPickup(pickupScreen);
    for(uint i = 0; i < 5; i++)
    {
        int left = 0, top = 0, right = 0, bottom = 0;
        ParseFourInts(GetIfaceIniStr("PupFilerLeft" + i), left, top, right, bottom);
        PickupFilterButton@ button = PickupFilterButton(i, ITEMS_PICKUP, true, left, top, right, bottom, pickupGroupOwn, null, "pickup_pushed" + i + ".png");
        pickupGroupOwn.AddControl(button);
    }

    @pickupGroupOpp = ButtonGroupPickup(pickupScreen);
    for(uint i = 0; i < 5; i++)
    {
        int left = 0, top = 0, right = 0, bottom = 0;
        ParseFourInts(GetIfaceIniStr("PupFilerRight" + i), left, top, right, bottom);
        PickupFilterButton@ button = PickupFilterButton(i, ITEMS_PICKUP_FROM, false, left, top, right, bottom, pickupGroupOpp, null, "pickup_pushed" + i + ".png");
        pickupGroupOpp.AddControl(button);
    }

    @pickupShow = @PickupShow();
    Control@ control = @Control();
    control.AddControl(@insect);    
    control.AddControl(@insectPutAll);
    control.AddControl(@insectTakeAll);
    control.AddControl(pickupGroupOwn);
    control.AddControl(pickupGroupOpp);
    pickupScreen.Control(control).SetCallbackShow(pickupShow).Multiinstance(false);
}

void ExecutePutAll() 
{
    RunServerScriptUnsafe( "unsafe_client@unsafe_PutAll", containerId, bodyId, pickupFilterOwn, null, null );
}

void ExecuteTakeAll() 
{
    RunServerScriptUnsafe( "unsafe_client@unsafe_TakeAll", containerId, bodyId, pickupFilterOpp, null, null );
}

class InjectLabel : CLabel
{
    IGUIScreenOpt@ window;
    // bool infected;
    Sprite         backgroundPic;
    Control@       picControl;

    InjectLabel(IGUIScreenOpt@ window /*, int infected,*/)
    {
        super(0, 0, 0, 0, "");
        this.backgroundPic.LoadByIni("PupVolumeIndBackPic", PT_ART_INTRFACE);
        @picControl = Control();
        @this.window = window;
        /*if( infected > 0 )
           {
                this.buttonDown.LoadByIni( "ChaPrintPicDn", PT_ART_INTRFACE );
                this.infected = true;
           }
           else
                this.infected = false;*/
    }

    /*void Init()
       {
            if( this.infected )
                    this.Position( "ChaPrint" );
            else
            {
                    this.Position( 0, 0 );
                    this.Size( 0, 0 );
            }
       }*/

    void PicPosition(string& ini)
    {
        picControl.Position(ini);
    }

    void TextPosition(string& ini)
    {
        CLabel::Position(ini);
    }

    int Left()
    {
        if(valid(this.window))
            return(this.window.GetPosX() + this.left);
        return(0);
    }

    int PicLeft()
    {
        if(valid(this.window))
            return(this.window.GetPosX() + this.picControl.left);
        return(0);
    }

    int Top()
    {
        if(valid(this.window))
            return(this.window.GetPosY() + this.top);
        return(0);
    }

    int PicTop()
    {
        if(valid(this.window))
            return(this.window.GetPosY() + this.picControl.top);
        return(0);
    }

    void Draw()
    {
        DrawSprite(this.backgroundPic.Id, 0, this.PicLeft(), this.PicTop(), 0);
        CLabel::Draw();
    }
};

class InjectPutAllButton : Control
{
    IGUIScreenOpt@ window;
    Sprite         buttonDown;

    InjectPutAllButton(IGUIScreenOpt@ window)
    {
        @this.window = window;
        this.buttonDown.LoadByIni("PupPutAllPic", PT_ART_INTRFACE);
    }

    void Init()
    {
        this.Position("PupPutAll");
    }

    void Click()
    {
        ExecutePutAll();
    }

    int Left()
    {
        if(valid(this.window))
            return(this.window.GetPosX() + this.left);
        return(0);
    }

    int Top()
    {
        if(valid(this.window))
            return(this.window.GetPosY() + this.top);
        return(0);
    }

    void Draw()
    {
        if(this.mousePressed)
            DrawSprite(this.buttonDown.Id, 0, this.Left(), this.Top(), 0);
    }
};

class InjectTakeAllButton : Control
{
    IGUIScreenOpt@ window;
    Sprite         buttonDown;

    InjectTakeAllButton(IGUIScreenOpt@ window)
    {
        @this.window = window;
        this.buttonDown.LoadByIni("PupTAPicDn", PT_ART_INTRFACE);
    }

    void Init()
    {
        this.Position("PupTakeAll");
    }

    void Click()
    {
        ExecuteTakeAll();
    }

    int Left()
    {
        if(valid(this.window))
            return(this.window.GetPosX() + this.left);
        return(0);
    }

    int Top()
    {
        if(valid(this.window))
            return(this.window.GetPosY() + this.top);
        return(0);
    }

    void Draw()
    {
        if(this.mousePressed)
            DrawSprite(this.buttonDown.Id, 0, this.Left(), this.Top(), 0);
    }
};

class ButtonGroupPickup : Control
{
    // only a container
    // child controls should implement "unclick me" on Update() by index comparison and call this.set_Selected() with own index on Click()
    IGUIScreenOpt@ window;
    int            selected;

    ButtonGroupPickup(IGUIScreenOpt@ window)
    {
        super(0, 0, 0, 0);         // This is mere a container
        @this.window = window;
        selected = FILTER_BUTTON_SELECTED_NONE;
    }

    int Top()
    {
        return valid(window) ? window.GetPosY() : 0;
    }

    int Left()
    {
        return valid(window) ? window.GetPosX() : 0;
    }
};

class PickupFilterButton : Control
{
    ButtonGroupPickup@ group; // parent container
    int          index;
    int          collection;
    bool         selected;
    bool         own;
    Sprite       spriteUp;
    Sprite       spriteDown;

    PickupFilterButton(int index, int collection, bool own, int left, int top, int right, int bottom, ButtonGroupPickup@ group, string@ spriteup, string@ spritedown)
    {
        this.index = index;
        this.collection = collection;
        this.own = own;
        @this.group = group;
        super(left, top, right - left, bottom - top);
        if(valid(spriteup) && !spriteUp.Load(spriteup, PT_ART_INTRFACE))
            Message("Couldn't load sprite: " + spriteup);
        if(valid(spritedown) && !spriteDown.Load(spritedown, PT_ART_INTRFACE))
            Message("Couldn't load sprite: " + spritedown);

        selected = false;
    }

    void Click()
    {
        if(!selected)
        {
            if(own)
                pickupFilterOwn = index;
            else
                pickupFilterOpp = index;
            //Message("clicked index "+index+" for collection "+collection);
            group.selected = index;
        }
        else
        {
            if(own)
                pickupFilterOwn = PICKUP_FILTER_NONE;
            else
                pickupFilterOpp = PICKUP_FILTER_NONE;
            //Message("UNclicked index "+index+" for collection "+collection);
            group.selected = FILTER_BUTTON_SELECTED_NONE;
        }
        if(own)
            SetScroll(SCROLL_PICKUP, 0);
        else
            SetScroll(SCROLL_PICKUP_FROM, 0);
        group.Update();
        RefreshItemsCollection(collection);
    }

    void Update()
    {
        selected = (group.selected == index);
    }

    void Draw()
    {
        if(mousePressed || selected)
        {
            if(spriteDown.Id != 0)
                DrawSprite(spriteDown.Id, 0, Left(), Top(), 0);
        }
        else
        {
            if(spriteUp.Id != 0)
                DrawSprite(spriteUp.Id, 0, Left(), Top(), 0);
        }
    }
};

class PickupShow : IGUIScreenCallbackShow
{
    void OnShow(int p0, int p1, int p2)
    {
        pickupFilterOwn = PICKUP_FILTER_NONE;
        pickupFilterOpp = PICKUP_FILTER_NONE;
        pickupGroupOwn.selected = FILTER_BUTTON_SELECTED_NONE;
        pickupGroupOwn.Update();
        pickupGroupOpp.selected = FILTER_BUTTON_SELECTED_NONE;
        pickupGroupOpp.Update();       
    }
};

void ParseFourInts(string& str, int& v0, int& v1, int& v2, int& v3)
{
    // Message("parsing four ints: "+str);
    array<string@>@ ints = split(str, " ");
    if(ints.length() < 4)
        return;
    StrToInt(ints[0], v0);
    StrToInt(ints[1], v1);
    StrToInt(ints[2], v2);
    StrToInt(ints[3], v3);
}
