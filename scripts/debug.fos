//
// FOnline: 2238
// Rotators
//
// debug.fos
//

// Shows debug info depending on settings. See debug_h.fos for used defines.
// Debug levels can be set in InitDebug.

#define __DEBUG_MODULE__
#include "_macros.fos"
#include "debug_h.fos"
#include "logging_h.fos"
#include "utils_h.fos"

#define SET_DEBUG_LEVEL    # (name, level)Dict.set(name, level)

// Set minimum levels here
void InitDebug() // export
{
    #ifdef __DEBUG__
    SET_DEBUG_LEVEL("trains", DEBUG_WARNING);
    SET_DEBUG_LEVEL("cars", DEBUG_WARNING);
    SET_DEBUG_LEVEL("banks", DEBUG_WARNING);
    SET_DEBUG_LEVEL("cheats", DEBUG_WARNING);
    SET_DEBUG_LEVEL("utils", DEBUG_WARNING);
    SET_DEBUG_LEVEL("special_description", DEBUG_WARNING);
    SET_DEBUG_LEVEL("rooms", DEBUG_WARNING);
    SET_DEBUG_LEVEL("patrolling", DEBUG_WARNING);
    SET_DEBUG_LEVEL("factions", DEBUG_WARNING);
    SET_DEBUG_LEVEL("tents", DEBUG_WARNING);
    SET_DEBUG_LEVEL("brahmin", DEBUG_WARNING);
    SET_DEBUG_LEVEL("weather", DEBUG_WARNING);
    SET_DEBUG_LEVEL("cutscene", DEBUG_WARNING);
    SET_DEBUG_LEVEL("npc_schedule", DEBUG_WARNING);
    SET_DEBUG_LEVEL("recycler", DEBUG_WARNING);
    SET_DEBUG_LEVEL("shuffler", DEBUG_WARNING);
    SET_DEBUG_LEVEL("spawner_container", DEBUG_WARNING);
    #endif
    #ifndef __DEBUG__
    SET_DEBUG_LEVEL("trains", DEBUG_WARNING);
    SET_DEBUG_LEVEL("cars", DEBUG_WARNING);
    SET_DEBUG_LEVEL("banks", DEBUG_WARNING);
    SET_DEBUG_LEVEL("cheats", DEBUG_WARNING);
    SET_DEBUG_LEVEL("utils", DEBUG_WARNING);
    SET_DEBUG_LEVEL("special_description", DEBUG_WARNING);
    SET_DEBUG_LEVEL("rooms", DEBUG_WARNING);
    SET_DEBUG_LEVEL("rooms", DEBUG_WARNING);
    SET_DEBUG_LEVEL("patrolling", DEBUG_WARNING);
    SET_DEBUG_LEVEL("factions", DEBUG_WARNING);
    SET_DEBUG_LEVEL("tents", DEBUG_WARNING);
    SET_DEBUG_LEVEL("brahmin", DEBUG_WARNING);
    SET_DEBUG_LEVEL("weather", DEBUG_WARNING);
    SET_DEBUG_LEVEL("cutscene", DEBUG_WARNING);
    SET_DEBUG_LEVEL("npc_schedule", DEBUG_WARNING);
    SET_DEBUG_LEVEL("recycler", DEBUG_WARNING);
    SET_DEBUG_LEVEL("shuffler", DEBUG_WARNING);
    SET_DEBUG_LEVEL("spawner_container", DEBUG_WARNING);
    #endif
}

#ifdef __DEBUG__
# define _PlayersGetter    GetAllOnlinePlayers
#endif

#ifndef __DEBUG__
# define _PlayersGetter    GetAuthenticatedPlayers
#endif

dictionary Dict;

void WLog(string& type, string& message, int level)   // export
{
    if(!ToShow(type, level))
        return;

    string@ name = LevelToString(level);
    Log(type + " " + name + message);

    if(ToShowCallstack(level))
        PrintCallstack(1);

    if(ToBroadcast(level))
    {
        ILog("debug", "(" + type + ") " + name + message);
        array<Critter@> players;
        for(uint i = 0, j = _PlayersGetter(players); i < j; i++)
            players[i].Say(SAY_NETMSG, type + " " + name + message);
    }
}

// Duplication: PrintCallstack requires it
void WLog(string& type, string& message)   // export
{
    int level = DEBUG_MESSAGE;
    if(!ToShow(type, level))
        return;

    string@ name = LevelToString(level);
    Log(type + " " + name + message);

    if(ToShowCallstack(level))
        PrintCallstack();

    if(ToBroadcast(level))
    {
        ILog("debug", "(" + type + ") " + name + message);
        array<Critter@> players;
        for(uint i = 0, j = _PlayersGetter(players); i < j; i++)
            players[i].Say(SAY_NETMSG, type + " " + name + message);
    }
}

bool ToShow(string& type, int level)
{
    #ifndef __DEBUG__
    if(level == DEBUG_MESSAGE)
        return false;
    #endif
    #ifdef __DEBUG__
    if(level >= DEBUG_WARNING)
        return true;
    #endif
    if(level >= DEBUG_ERROR)
        return true;
    int minlevel = DEBUG_ERROR;
    if(!Dict.get(type, minlevel))
        return false;
    return minlevel <= level;
}

bool ToShowCallstack(int level)
{
    return level >= DEBUG_ERROR;
}

bool ToBroadcast(int level)
{
    #ifdef __DEBUG__
    return level >= DEBUG_ERROR;
    #endif
    #ifndef __DEBUG__
    return level >= DEBUG_CRITICAL;
    #endif
}

string@ LevelToString(int level)
{
    switch(level)
    {
    case DEBUG_MESSAGE:
        return "MSG: ";
    case DEBUG_WARNING:
        return "WARN: ";
    case DEBUG_ERROR:
        return "ERR: ";
    case DEBUG_CRITICAL:
        return "CRITICAL: ";
    case DEBUG_FATAL:
        return "FATAL: ";
    default:
        ;
    }
    return "LEVEL " + level + ": ";
}
