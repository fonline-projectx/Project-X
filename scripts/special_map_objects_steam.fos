//
// FOnline: 2238
// Rotators
//
// special_map_objects_steam.fos
//

#define STEAM_ON             (0x01)

#define STEAM_SPAWNER_PID    (10014)
#define STEAM_PID            (PID_TANKER_STEAM)


class CSteamSearcher : ISearchingCallback
{
    uint FindTogglableSMOs(array<ITogglableSMO@>& list, Map& map, int globalId)
    {
        uint         origLength = list.length();
        array<Item@> spawners;
        uint         spawnerCount = map.GetItems(STEAM_SPAWNER_PID, spawners);

        uint         searchedSpawnerCount = 0;
        array<bool> spawnerValidity(spawnerCount);

        for(uint i = 0; i < spawnerCount; i++)
        {
            if(globalId == -1 || globalId == spawners[i].Val1)
            {
                spawnerValidity[i] = true;
                searchedSpawnerCount++;
            }
            else
                spawnerValidity[i] = false;
        }

        list.resize(origLength + searchedSpawnerCount);

        for(uint i = 0, j = origLength; i < spawnerCount; i++)
        {
            if(spawnerValidity[i])
            {
                @list[j] = MapSteamObject(spawners[i], map, STEAM_PID);
                j++;
            }
        }
        return searchedSpawnerCount;
    }

    uint FindSteamObjects(array<MapSteamObject@>& list, Map& map, int id)
    {
        uint         origLength = list.length();
        array<Item@> spawners;
        uint         spawnerCount = map.GetItems(STEAM_SPAWNER_PID, spawners);

        uint         searchedSpawnerCount = 0;
        array<bool> spawnerValidity(spawnerCount);

        for(uint i = 0; i < spawnerCount; i++)
        {
            if(id == -1 || id == spawners[i].Val0)
            {
                spawnerValidity[i] = true;
                searchedSpawnerCount++;
            }
            else
                spawnerValidity[i] = false;
        }

        list.resize(origLength + searchedSpawnerCount);

        for(uint i = 0, j = origLength; i < spawnerCount; i++)
        {
            if(spawnerValidity[i])
            {
                @list[j] = MapSteamObject(spawners[i], map, STEAM_PID);
                j++;
            }
        }
        return searchedSpawnerCount;
    }
};

CSteamSearcher@ SteamSearcher = CSteamSearcher();

// init functions

void _InitSteamSpawner(Item& spawner, bool firstTime)
{
    if(!firstTime)
        return;
    uint[] values = { spawner.Id };
    CreateTimeEvent(__FullSecond + REAL_SECOND(1), "e_StartSteam", values, true);
}


// Valve functions

bool s_SteamValve(Critter& player, Scenery& terminal, int skill, Item@ item, int steamId)
{
    if(player.IsPlayer() && skill == -1 && !valid(item))
    {
        Map@                   map = player.GetMap();
        array<MapSteamObject@> steamItems;
        for(uint i = 0, j = SteamSearcher.FindSteamObjects(steamItems, map, steamId); i < j; i++)
            steamItems[i].Toggle();
    }
    return false;
}

bool s_SteamValve(Critter& player, Scenery& terminal, int skill, Item@ item, int steamId, int mapPid)
{
    if(player.IsPlayer() && skill == -1 && !valid(item))
    {
        Location@ loc = GetLocationOf(player);
        Map @ map;
        if(valid(loc))
            @map = loc.GetMap(mapPid);
        array<MapSteamObject@> steamItems;
        for(uint i = 0, j = SteamSearcher.FindSteamObjects(steamItems, map, steamId); i < j; i++)
            steamItems[i].Toggle();
    }
    return false;
}


// timeevents and search functions

uint e_StartSteam(array<uint>@ values)     // delayed item initialization
{
    Item@ spawner = GetItem(values[0]);
    if(!valid(spawner) || spawner.MapId == 0)
        return 0;

    uint16 hexX, hexY;
    Map@   map = spawner.GetMapPosition(hexX, hexY);
    if(!valid(map))
        return 0;

    MapSteamObject@ steamItem = MapSteamObject(spawner, map, STEAM_PID);

    if(steamItem.IsOn())
    {
        steamItem.ForceOn();
    }
    return 0;
}

uint e_SpawnSteamItem(array<uint>@ values)
{
    MapSteamObject@ steamItem;

    Item@           spawner = GetItem(values[0]);
    Map@            map = GetMap(values[1]);
    if(!valid(spawner) || !valid(map))
        return 0;
    Item@ steam;
    if(values[2] != 0)
    {
        Item@ steam = GetItem(values[2]);
        @steamItem = MapSteamObject(spawner, map, STEAM_PID, steam);
    }
    else
        @steamItem = MapSteamObject(spawner, map, STEAM_PID);

    values[2] = steamItem.MoveSteam();

    return REAL_SECOND(steamItem.GetMovementInterval());
}

// class

class MapSteamObject : ITogglableSMO
{
    Item@ spawner;
    Map@  map;
    uint  steamPid;
    Item@ steam;
    bool  steamInitialized;    // for lazy init

    MapSteamObject(Item@ spawner, Map@ map, uint steamPid, Item@ steam)
    {
        @this.spawner = spawner;
        @this.map = map;
        this.steamPid = steamPid;
        @this.steam = steam;
        steamInitialized = true;
    }

    MapSteamObject(Item@ spawner, Map@ map, uint steamPid)
    {
        @this.spawner = spawner;
        @this.map = map;
        this.steamPid = steamPid;

        steamInitialized = false;
    }

    void LazyInitSteam()     // searches for steam only once it's needed
    {
        if(IsOn())
        {
            array<Item@> steamItems;
            uint         steamCount = map.GetItems(steamPid, steamItems);


            for(uint i = 0; i < steamCount; i++)
            {
                if(spawner.Id == uint(steamItems[i].Val0))
                {
                    @steam = steamItems[i];
                    break;
                }
            }
        }

        steamInitialized = true;
    }

    void Toggle()
    {
        if(!steamInitialized)
            LazyInitSteam();
        if(IsOn())
        {
            TurnOff();
        }
        else
        {
            TurnOn();
        }
    }

    bool IsOn()
    {
        return FLAG(spawner.Val3, STEAM_ON);
    }

    bool IsOff()
    {
        return !FLAG(spawner.Val3, STEAM_ON);
    }

    void ForceOn()
    {
        int radiusOfMovement = GetMovementRadius();
        int movementInterval = GetMovementInterval();
        @steam = map.AddItem(spawner.HexX, spawner.HexY, STEAM_PID, 1);

        if(movementInterval >= 1 && radiusOfMovement >= 1)
        {
            uint[] values = { spawner.Id, map.Id, 0 };
            if(valid(steam))
            {
                values[2] = steam.Id;
                steam.Val0 = spawner.Id;
            }
            spawner.Val4 = CreateTimeEvent(0, "e_SpawnSteamItem", values, true);
        }
        SETFLAG(spawner.Val3, STEAM_ON);
    }

    void TurnOn()
    {
        // if(!steamInitialized) LazyInitSteam();
        if(IsOff())
        {
            ForceOn();
        }
    }

    void TurnOff()
    {
        if(!steamInitialized)
            LazyInitSteam();
        if(IsOn())
        {
            if(spawner.Val4 != 0)
            {
                EraseTimeEvent(spawner.Val4);
                spawner.Val4 = 0;
            }
            if(valid(steam))
                DeleteItem(steam);

            UNSETFLAG(spawner.Val3, STEAM_ON);
        }
    }

    void SetMovementRadius(uint radius)
    {
        spawner.Val2 = (spawner.Val2 & 0x0000FFFF) | ((radius << 16) & 0xFFFF0000);
    }

    uint GetMovementRadius()
    {
        return (spawner.Val2 >> 16) & 0x0000FFFF;
    }

    void SetMovementInterval(uint interval)
    {
        spawner.Val2 = (spawner.Val2 & 0xFFFF0000) | (interval & 0x0000FFFF);
    }

    uint GetMovementInterval()
    {
        return spawner.Val2 & 0x0000FFFF;
    }

    uint MoveSteam()
    {
        if(!steamInitialized)
            LazyInitSteam();
        int    radiusOfMovement = GetMovementRadius();
        int    movementInterval = GetMovementInterval();

        uint16 x = spawner.HexX;
        uint16 y = spawner.HexY;
        uint   dist = Random(0, radiusOfMovement);
        if(dist != 0)
            map.GetHexCoord(spawner.HexX, spawner.HexY, x, y, Random(1, 360), dist);

        if(valid(steam))
        {
            MoveItem(steam, 1, map, x, y);
            return steam.Id;
        }
        else
        {
            @steam = map.AddItem(x, y, STEAM_PID, 1);
            if(valid(steam))
                steam.Val0 = spawner.Id;
            return steam.Id;
        }

    }
};
