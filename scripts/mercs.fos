//
// FOnline: 2238
// Rotators
//
// mercs.fos
//

#include "_macros.fos"
#include "_bags.fos"
#include "mercs_h.fos"
#include "_ai.fos"

#include "follower_h.fos"

#define ADD_MERC                # (name, properties) CMerc name(); name.properties; AddMerc(name)
#define MERC_UPDATE_INTERVAL    (REAL_DAY(9999))
#define MERC_MIN_COST           (50) // Minimum cost to lower to with dynamic prices

array<IMerc@> Mercs;

IMerc@ GetMerc(uint id)
{
    for(uint i = 0; i < uint(Mercs.length()); i++)
    {
        if(id == Mercs[i].GetID())
        {
            return Mercs[i];
        }
    }
    return null;
}

int GetMercId(int pid, uint type)
{
    for(uint i = 0, j = Mercs.length(); i < j; i++)
    {
        if(Mercs[i].GetType() != type)
            continue;
        array<int> pids = Mercs[i].GetPIDs();
        for(uint k = 0, l = pids.length(); k < l; k++)
            if(pid == pids[k])
                return int(Mercs[i].GetID());
    }
    return -1;
}

void AddMerc(CMerc& merc)
{
    Mercs.insertLast(merc);
}

uint e_UpdateMercPrices(array<uint>@ values)
{
    _TIMEBEGIN;
    Log("Updating merc prices");
    int min = 0;
    for(uint i = 0; i < Mercs.length() - 1; i++)
    {
        if(Mercs[i].GetCost() == 0 || !Mercs[i].IsDynamicPrice())
            continue;

        min = Mercs[i].GetBagValue() + MERC_MIN_COST;
        DLog("min cost=" + min);
        uint rand = Random(0, 35);
        int  cost = Mercs[i].GetCost();
        if((cost - rand) < min)
            Mercs[i].Cost(min);
        else
            Mercs[i].Cost(cost - rand);
    }
    _TIMEEND;
    return MERC_UPDATE_INTERVAL;
}

// Here we add our mercs, increment each new prototype's id with 1 (.ID(<previous merc's id+1>))
void InitMercs()
{
    GameVar@ var = GetGlobalVar(GVAR_merc_prices_event);
    if(valid(var) && var.GetValue() == 0)
    {
        Log("Creating merc event");
        CreateTimeEvent(AFTER(MERC_UPDATE_INTERVAL), "e_UpdateMercPrices", true);
        var = 1;
    }
    else
        Log("Merc event already exists");

    // int[] thug_pids = { 33, 34, 35, 36, 37, 69, 70, 72 };
    // int[] thug_melee = { 492, 493, 494, 495 };
    int[] child_slave_pids =
    { 50, 51, 52, 53, 298, 299 };
    int[] generic_male_slave_pids =
    {
        3, 14, 15, 18, 20, 22, 24, 26, 54, 63,
        65, 67, 95, 159, 173, 202, 206, 208,
        209, 212, 214, 220, 226, 227, 228,
        230, 232, 234, 303, 305, 307, 363
    };
    int[] generic_female_slave_pids =
    {
        4, 13, 17, 19, 21, 23, 25, 27, 55, 64,
        66, 68, 96, 203, 207, 210, 211, 213,
        215, 221, 231, 233, 235, 304, 306,
        362, 447, 448
    };

    // These use thier own protos. That's why they are lvl 1. Change proto instead of level
    // Thug mercenaries that you can buy in various towns
    ADD_MERC(thug_1,  ID(1).PID(492).Type(FOLLOWER_TYPE_MERC_HUMAN_MELEE).Bag(215).Level(1).StartCost(2500).AI(AIPACKET_2238_MERC_MELEE));                                          // Melee, Combat knife
    ADD_MERC(thug_2,  ID(2).PID(493).Type(FOLLOWER_TYPE_MERC_HUMAN_MELEE).Bag(331).Level(1).StartCost(4000).AI(AIPACKET_2238_MERC_MELEE));                                         // Melee, Sledgehammer
    ADD_MERC(thug_3,  ID(3).PID(495).Type(FOLLOWER_TYPE_MERC_HUMAN_MELEE).Bag(331).Level(1).StartCost(5500).AI(AIPACKET_2238_MERC_MELEE));                                         // Melee, Sledgehammer
    ADD_MERC(thug_4,  ID(4).PID(494).Type(FOLLOWER_TYPE_MERC_HUMAN_MELEE).Bag(331).Level(1).StartCost(7000).AI(AIPACKET_2238_MERC_MELEE));                                         // Melee, Sledgehammer
    ADD_MERC(thug_5,  ID(5).PID(489).Type(FOLLOWER_TYPE_MERC_HUMAN_SG).Bag(335).Level(1).StartCost(9000).AI(AIPACKET_2238_MERC_RANGED));                                           // SG, 14mm pistol
    ADD_MERC(thug_6,  ID(6).PID(490).Type(FOLLOWER_TYPE_MERC_HUMAN_SG).Bag(155).Level(1).StartCost(11000).AI(AIPACKET_2238_MERC_RANGED));                                           // SG, 10mm SMG
    ADD_MERC(thug_7,  ID(7).PID(491).Type(FOLLOWER_TYPE_MERC_HUMAN_SG).Bag(168).Level(1).StartCost(15000).AI(AIPACKET_2238_MERC_RANGED));                                           // SG, Assault Rifle
    ADD_MERC(thug_8,  ID(30).PID(496).Type(FOLLOWER_TYPE_MERC_HUMAN_BG).Bag(185).Level(1).StartCost(17500).AI(AIPACKET_2238_MERC_RANGED));                                          // BG, Light support weapon
    ADD_MERC(thug_9,  ID(31).PID(497).Type(FOLLOWER_TYPE_MERC_HUMAN_BG).Bag(165).Level(1).StartCost(20000).AI(AIPACKET_2238_MERC_RANGED));                                          // BG, Minigun
    ADD_MERC(thug_10, ID(32).PID(498).Type(FOLLOWER_TYPE_MERC_HUMAN_BG).Bag(197).Level(1).StartCost(22500).AI(AIPACKET_2238_MERC_RANGED));                                          // BG, Rocket launcher
    ADD_MERC(thug_11, ID(33).PID(499).Type(FOLLOWER_TYPE_MERC_HUMAN_EW).Bag(277).Level(1).StartCost(15000).AI(AIPACKET_2238_MERC_RANGED));                                          // Energy, Laser pistol
    ADD_MERC(thug_12, ID(34).PID(500).Type(FOLLOWER_TYPE_MERC_HUMAN_EW).Bag(184).Level(1).StartCost(20000).AI(AIPACKET_2238_MERC_RANGED));                                         // Energy, Laser Rifle

    // Mutant mercenaries, available in Broken Hills
    ADD_MERC(mutant_1,             ID(35).PID(501).Type(FOLLOWER_TYPE_MERC_MUTANT_UNARMED).Bag(1).Level(1).StartCost(20000).AI(AIPACKET_2238_MERC_MUTANT_UNARMED));                // Unarmed
    ADD_MERC(mutant_2,             ID(36).PID(502).Type(FOLLOWER_TYPE_MERC_MUTANT_BG).Bag(165).Level(1).StartCost(55000).AI(AIPACKET_2238_MERC_MUTANT_RANGED));                    // BG, Minigun
    ADD_MERC(mutant_3,             ID(37).PID(503).Type(FOLLOWER_TYPE_MERC_MUTANT_BG).Bag(197).Level(1).StartCost(60000).AI(AIPACKET_2238_MERC_MUTANT_RANGED));                    // BG, Rocketlauncher

    // Ghoul mercenaries, available in Gecko
    ADD_MERC(ghoul_1,              ID(38).PID(504).Type(FOLLOWER_TYPE_MERC_GHOUL_MELEE).Bag(153).Level(1).StartCost(1500).AI(AIPACKET_2238_MERC_MELEE));                            // Melee, Sharpened Spear
    ADD_MERC(ghoul_2,              ID(39).PID(505).Type(FOLLOWER_TYPE_MERC_GHOUL_SG).Bag(191).Level(1).StartCost(12500).AI(AIPACKET_2238_MERC_RANGED));                             // SG, Sniper Rifle

    // Animals
    ADD_MERC(dog_1,                ID(8).PID(9).Type(FOLLOWER_TYPE_DOG).Dialog(9311).Bag(1).Level(15).StartCost(700));                                                             // Junktown
    ADD_MERC(dog_2,                ID(19).PID(9).Type(FOLLOWER_TYPE_DOG).Dialog(9311).Bag(1).Level(15).StartCost(700));                                                            // Klamath
    ADD_MERC(dog_3,                ID(40).PID(522).Type(FOLLOWER_TYPE_DOG).Dialog(9311).Bag(1).Level(15).StartCost(500));                                                          // Scout Dog

    ADD_MERC(pigrat_1,                 ID(41).PID(116).Type(FOLLOWER_TYPE_PIGRAT).Dialog(9322).Bag(1).Level(24).StartCost(750));                                           			// Tamable pigrat
    ADD_MERC(molerat_1,                ID(42).PID(110).Type(FOLLOWER_TYPE_MOLERAT).Dialog(9322).Bag(1).Level(24).StartCost(1000));                                                 // Tamable molerat

    // Brahmin are very strong in general. Thats why the low level
    ADD_MERC(brahmin_1,            ID(9).PID(10).Type(FOLLOWER_TYPE_BRAHMIN).Dialog(9312).Bag(1).Level(3).StartCost(1500));                                                                       // Hub
    ADD_MERC(brahmin_2,            ID(10).PID(10).Type(FOLLOWER_TYPE_BRAHMIN).Dialog(9312).Bag(1).Level(1).StartCost(500));                                                                      // Modoc
    ADD_MERC(brahmin_3,            ID(11).PID(10).Type(FOLLOWER_TYPE_BRAHMIN).Dialog(9312).Bag(1).Level(5).StartCost(3000));                                                                      // NCR
    ADD_MERC(brahmin_4,            ID(18).PID(10).Type(FOLLOWER_TYPE_BRAHMIN).Dialog(9312).Bag(1).Level(2).StartCost(1100));                                                                      // Broken Hills

    // Slaves, Metzger in Den sells all slaves, Vortis in NCR only tribal and normal.
    ADD_MERC(male_slave_1,         ID(12).PID(3).Type(FOLLOWER_TYPE_SLAVE).Dialog(9314).Bag(1).Level(5).StartCost(700).SellPrice(350));                                                           // tribal
    ADD_MERC(male_slave_2,         ID(13).PID(22).Type(FOLLOWER_TYPE_SLAVE).Dialog(9314).Bag(1).Level(7).StartCost(1000).SellPrice(500));                                                         // farmer
    ADD_MERC(male_slave_3,         ID(14).PID(24).Type(FOLLOWER_TYPE_SLAVE).Dialog(9314).Bag(1).Level(11).StartCost(1500).SellPrice(755));                                                        // leather armor
    ADD_MERC(female_slave_1,       ID(15).PID(4).Type(FOLLOWER_TYPE_SLAVE).Dialog(9314).Bag(1).Level(4).StartCost(700).SellPrice(350));                                                           // tribal
    ADD_MERC(female_slave_2,       ID(16).PID(25).Type(FOLLOWER_TYPE_SLAVE).Dialog(9314).Bag(1).Level(6).StartCost(1000).SellPrice(500));                                                         // kurwa
    ADD_MERC(female_slave_3,       ID(17).PID(23).Type(FOLLOWER_TYPE_SLAVE).Dialog(9314).Bag(1).Level(8).StartCost(1300).SellPrice(650));                                                         // leather armor

    // note: these must be the last slave-related entries (so that GetMercId can check the previous first):
    ADD_MERC(child_slave,          ID(20).PID(child_slave_pids).Type(FOLLOWER_TYPE_SLAVE).Dialog(9314).Bag(BAG_Empty).Level(1).StartCost(400).SellPrice(200));
    ADD_MERC(generic_male_slave,   ID(21).PID(generic_male_slave_pids).Type(FOLLOWER_TYPE_SLAVE).Dialog(9314).SellPrice(400));               // since they are not buyable (hence spawnable), some data is missing
    ADD_MERC(generic_female_slave, ID(22).PID(generic_female_slave_pids).Type(FOLLOWER_TYPE_SLAVE).Dialog(9314).SellPrice(300));             // since they are not buyable (hence spawnable), some data is missing
    // next entry is ID 23!

    //SetGvar(GVAR_merc_prices_init, 1);                                                                                                       // Dynamic prices initialized
}
