//
// FOnline: 2238
// Rotators
//
// perks.fos
//

// Perk up/down processing. Perk data should be edited with the PerkEditor tool.
// For perks that require special handling (nongeneric conditions/effects),
// see the use of SATISFIES macro in InitPerks() function.

#ifdef __CLIENT // Macro defined in client_main.fos
# define Critter    CritterCl
#endif

#include "_macros.fos"
#include "perks_data.fos"

funcdef bool SatisfiesFunc(Critter& cr, int perk, int level, int p0, int p1, int p2);
funcdef void ProcessFunc(Critter& cr, int perk, int level, int p0, int p1, int p2);

class Requirement
{
    uint16 Param;
    bool   Atleast;   // at most if false
    int    Value;

    Requirement(uint16 param, bool atleast, int value)
    {
        Param = param;
        Atleast = atleast;
        Value = value;
    }
    bool Satisfies(Critter@ cr)
    {
        if(Atleast)
            return cr.ParamBase[Param] >= Value;
        else
            return cr.ParamBase[Param] <= Value;
    }
};

#ifdef __SERVER
class Effect
{
    uint16 Param;
    bool   Increase;   // decrease if false
    int    Value;

    Effect(uint16 param, bool increase, int value)
    {
        Param = param;
        Increase = increase;
        Value = value;
    }
    void Process(Critter@ cr)
    {
        if(Increase)
            cr.ParamBase[Param] = cr.ParamBase[Param] + Value;
        else
            cr.ParamBase[Param] = cr.ParamBase[Param] - Value;
    }
};
#endif
class LevelData
{
    array<Requirement> Requirements;
    #ifdef __SERVER
    array<Effect>      UpEffects;
    array<Effect>      DownEffects;
    #endif
    bool Satisfies(Critter@ cr)
    {
        for(uint i = 0, j = Requirements.length(); i < j; i++)
            if(!Requirements[i].Satisfies(cr))
                return false;
        return true;
    }
    #ifdef __SERVER
    void ProcessUp(Critter@ cr)
    {
        for(uint i = 0, j = UpEffects.length(); i < j; i++)
            UpEffects[i].Process(cr);
    }
    void ProcessDown(Critter@ cr)
    {
        for(uint i = 0, j = DownEffects.length(); i < j; i++)
            DownEffects[i].Process(cr);
    }
    #endif
};

class PerkData
{
    int            Id;
    int            Range;
    int            Type;
    SatisfiesFunc@ SatisfiesF;
    #ifdef __SERVER
    ProcessFunc@   ProcessUpF;
    ProcessFunc@   ProcessDownF;
    #endif
    int            p0;
    int            p1;
    int            p2;

    PerkData()
    {
        Id = 0;
        Range = 0;
        Type = 2;
        @SatisfiesF = null;
        #ifdef __SERVER
        @ProcessUpF = null;
        @ProcessDownF = null;
        #endif
    }

    array<LevelData> Levels;

    bool Check(Critter@ cr, int level)
    {
        if(level >= Range)
            return false;
        return Levels[level].Satisfies(cr) && (!valid(SatisfiesF) || SatisfiesF(cr, Id, level, p0, p1, p2));
    }
    #ifdef __SERVER
    void ProcessUp(Critter@ cr, int fromlevel)
    {
        if(fromlevel >= int(Range) || fromlevel < 0)
            return;
        Levels[fromlevel].ProcessUp(cr);
        if(valid(ProcessUpF))
            ProcessUpF(cr, Id, fromlevel, p0, p1, p2);
    }
    void ProcessDown(Critter@ cr, int tolevel)
    {
        if(tolevel >= int(Range) || tolevel < 0)
            return;
        Levels[tolevel].ProcessDown(cr);
        if(valid(ProcessUpF))
            ProcessDownF(cr, Id, tolevel, p0, p1, p2);
    }
    #endif
    void CustomSatisfies(SatisfiesFunc@ func, int _p0, int _p1, int _p2)
    {
        @SatisfiesF = func;
        p0 = _p0;
        p1 = _p1;
        p2 = _p2;
    }
};


#ifndef __CLIENT
import int NextLevelNeedExp(Critter& cr)  from "parameters";

bool d_PerkCheck(Critter& player, Critter@ npc, int perk)
{
    return PerkCheck(player, perk, true);
}

bool d_PerkCheckFalse(Critter& player, Critter@ npc, int perk)
{
    return !PerkCheck(player, perk, true);
}

bool d_ProfessionPerkCheck(Critter& player, Critter@ npc, int perk, int level)
{
    if(player.PerkBase[perk] != level)
        return false;
    return PerkCheck(player, perk, true);
}

bool d_ProfessionCheck(Critter& player, Critter@ npc, int perk)
{
    return AssertProfessions(player);
}
#endif

array<PerkData> Perks;

void InitPerks() // export
{
    int i = 0;
    do
    {
        array<int>@ header = PerksData[i];
        int id = header[0];
        if(id == -1)
            break;
        if(int(Perks.length()) <= id)
            Perks.resize(id + 1);
        PerkData@ perk = Perks[id];
        perk.Id = id;
        perk.Type = header[1];
        perk.Range = header[2];
        perk.Levels.resize(perk.Range);
        for(int clev = 0; clev < perk.Range; clev++)
        {
            i++;
            perk.Levels[clev].Requirements.resize(PerksData[i].length() / 3);
            for(uint j = 0, k = perk.Levels[clev].Requirements.length(); j < k; j++)
            {
                perk.Levels[clev].Requirements[j].Param = PerksData[i][3 * j];
                perk.Levels[clev].Requirements[j].Atleast = PerksData[i][3 * j + 1] != 0;
                perk.Levels[clev].Requirements[j].Value = PerksData[i][3 * j + 2];
            }
        }
        #ifdef __SERVER
        for(int clev = 0; clev < perk.Range; clev++)
        {
            i++;
            perk.Levels[clev].UpEffects.resize(PerksData[i].length() / 3);
            for(uint j = 0, k = perk.Levels[clev].UpEffects.length(); j < k; j++)
            {
                perk.Levels[clev].UpEffects[j].Param = PerksData[i][3 * j];
                perk.Levels[clev].UpEffects[j].Increase = PerksData[i][3 * j + 1] != 0;
                perk.Levels[clev].UpEffects[j].Value = PerksData[i][3 * j + 2];
            }
        }

        for(int clev = 0; clev < perk.Range; clev++)
        {
            i++;
            if(PerksData[i].length() == 1)
            {
                perk.Levels[clev].DownEffects.resize(perk.Levels[clev].UpEffects.length());
                for(uint j = 0, k = perk.Levels[clev].UpEffects.length(); j < k; j++)
                {
                    perk.Levels[clev].DownEffects[j].Param = perk.Levels[clev].UpEffects[j].Param;
                    perk.Levels[clev].DownEffects[j].Increase = !perk.Levels[clev].UpEffects[j].Increase;
                    perk.Levels[clev].DownEffects[j].Value = perk.Levels[clev].UpEffects[j].Value;
                }
                continue;
            }
            perk.Levels[clev].UpEffects.resize(PerksData[i].length() / 3);
            for(uint j = 0, k = perk.Levels[clev].DownEffects.length(); j < k; j++)
            {
                perk.Levels[clev].DownEffects[j].Param = PerksData[i][3 * j];
                perk.Levels[clev].DownEffects[j].Increase = PerksData[i][3 * j + 1] != 0;
                perk.Levels[clev].DownEffects[j].Value = PerksData[i][3 * j + 2];
            }
        }
        #endif
        i++;
    }
    while(true);

    // still some customizing, todo: make it generic
    #define SATISFIES    # (__perk, __func, __p0, __p1, __p2)Perks[__perk].CustomSatisfies(__func, __p0, __p1, __p2)

    SATISFIES(PE_MORE_CRITICALS,         @_OrRangedSkill, 0, 0, 100);
    SATISFIES(PE_EVEN_MORE_CRITICALS,    @_OrRangedSkill, 0, 0, 125);
    SATISFIES(PE_SHARPSHOOTER,           @_OrRangedSkill, 0, 0, 150);
    SATISFIES(PE_BETTER_CRITICALS,       @_OrRangedSkill, 0, 0, 175);
    SATISFIES(PE_RIGHT_BETWEEN_THE_EYES, @_OrRangedSkill, 0, 0, 200);
    SATISFIES(PE_BONUS_RATE_OF_FIRE,     @_OrRangedSkill, 0, 0, 180);
    SATISFIES(PE_WEAPON_HANDLING,        @_OrRangedSkill, 0, 0, 100);
    SATISFIES(PE_FAST_RELOAD,            @_OrRangedGunSkill, 0, 0, 125);
    SATISFIES(PE_SPRAY_AND_PRAY,         @_OrRangedSkill, 0, 0, 125);
    SATISFIES(PE_MORE_RANGED_DAMAGE,     @_OrRangedSkill, 0, 0, 200);

    SATISFIES(PE_PROFESSION_ARMORER,           @_ProfessionCheck, SK_REPAIR,  50, 100);
    SATISFIES(PE_PROFESSION_GUNSMITH_S,        @_ProfessionCheck, SK_REPAIR,  50, 100);
    SATISFIES(PE_PROFESSION_GUNSMITH_B,        @_ProfessionCheck, SK_REPAIR,  50, 100);
    SATISFIES(PE_PROFESSION_ENERGY_EXPERT,     @_ProfessionCheck, SK_SCIENCE, 50, 100);
    SATISFIES(PE_PROFESSION_DEMOLITION_EXPERT, @_ProfessionCheck, SK_TRAPS,   50, 100);
    SATISFIES(PE_PROFESSION_DOCTOR,            @_ProfessionCheck, SK_DOCTOR,  50, 100);


    SATISFIES(PE_BONUS_RANGED_DAMAGE, @_BRD, 0, 0, 0);
    SATISFIES(PE_HTH_EVADE, @_OrSkill, SK_UNARMED, SK_MELEE_WEAPONS, 75);
    SATISFIES(PE_HTH_EVADE_II, @_OrSkill, SK_UNARMED, SK_MELEE_WEAPONS, 150);
    SATISFIES(PE_BONUS_HTH_DAMAGE, @_OrSkill, SK_UNARMED, SK_MELEE_WEAPONS, 75);
    SATISFIES(PE_BONUS_HTH_DAMAGE_II, @_OrSkill, SK_UNARMED, SK_MELEE_WEAPONS, 100);
    SATISFIES(PE_IN_YOUR_FACE, @_OrSkill, SK_UNARMED, SK_MELEE_WEAPONS, 125);
    SATISFIES(PE_HIT_THE_GAPS, @_OrSkill, SK_UNARMED, SK_MELEE_WEAPONS, 150);
    SATISFIES(PE_HTH_CRITICALS, @_OrSkill, SK_UNARMED, SK_MELEE_WEAPONS, 175);
    SATISFIES(PE_BONUS_HTH_ATTACKS, @_OrSkill, SK_UNARMED, SK_MELEE_WEAPONS, 180);
    SATISFIES(PE_AWARENESS, @_Awareness, 0, 0, 0);
    #ifdef __SERVER
    @Perks[PE_SPEAKER].ProcessUpF = _SpeakerUp;
    @Perks[PE_SPEAKER].ProcessDownF = _SpeakerDown;
    #endif
}

bool PerkCheck(Critter& cr, uint perk, bool always)   // Export
{
    if(perk >= Perks.length() || Perks[perk].Type == 2)
        return false;
    return (always || Perks[perk].Type == 0) && Perks[perk].Check(cr, cr.Perk[perk]);
}

bool SupportPerkCheck(Critter& cr, uint perk)   // Export
{
    if(perk >= Perks.length() || Perks[perk].Type != 1)
        return false;
    return Perks[perk].Check(cr, cr.Perk[perk]);
}

#ifdef __SERVER
void PerkUp(Critter& cr, uint perk, int fromlevel)   // Export
{
    if(perk >= Perks.length())
        return;
    Perks[perk].ProcessUp(cr, fromlevel);
}

void PerkDown(Critter& cr, uint perk, int tolevel)   // Export
{
    if(perk >= Perks.length())
        return;
    Perks[perk].ProcessDown(cr, tolevel);
}
#endif

// todo: make a generic condition in the editor
bool _OrSkill(Critter& cr, int perk, int level, int skill1, int skill2, int minskill)
{
    return cr.SkillBase[skill1] >= minskill || cr.SkillBase[skill2] >= minskill;
}

bool _OrRangedSkill(Critter& cr, int perk, int level, int, int, int minskill)
{
    return cr.SkillBase[SK_SMALL_GUNS] >= minskill || cr.SkillBase[SK_BIG_GUNS] >= minskill ||
           cr.SkillBase[SK_ENERGY_WEAPONS] >= minskill || cr.SkillBase[SK_THROWING] >= minskill;
}

bool _OrRangedGunSkill(Critter& cr, int perk, int level, int, int, int minskill)
{
    return cr.SkillBase[SK_SMALL_GUNS] >= minskill || cr.SkillBase[SK_BIG_GUNS] >= minskill ||
           cr.SkillBase[SK_ENERGY_WEAPONS] >= minskill;
}

bool _BRD(Critter& cr, int perk, int level, int, int, int)
{
    return cr.SkillBase[SK_BIG_GUNS] >= 150 + level * 25 || cr.SkillBase[SK_SMALL_GUNS] >= 150 + level * 25;
}

bool _Awareness(Critter& cr, int perk, int level, int, int, int)
{
    return cr.StatBase[ST_PERCEPTION] >= 6 || cr.SkillBase[SK_UNARMED] >= 100 || cr.SkillBase[SK_MELEE_WEAPONS] >= 100;
}

// professions

bool _ProfessionCheck(Critter& cr, int perk, int level, int skill, int level1, int level2)
{
    #ifdef __SERVER
    if(!AssertProfessions(cr))
        return false;
    if(level == 0)
        return cr.SkillBase[skill] >= level1;
    return cr.SkillBase[skill] >= level2;
    #endif
    #ifdef __CLIENT
    return false;
    #endif
}

#ifdef __SERVER
import int GetFollowers(Critter& player, bool all, array<Critter@>& followers) from "follower_common";

void _SpeakerUp(Critter& cr, int perk, int level, int p0, int p1, int p2)
{
    if(level != 0)
        return;
    array<Critter@> followers;
    for(int i = 0, j = GetFollowers(cr, true, followers); i < j; i++)
        SETFLAG(followers[i].FollowerVarBase[FV_FLAGS], FV_FLAG_MASTER_SPEAKER);
}

void _SpeakerDown(Critter& cr, int perk, int level, int p0, int p1, int p2)
{
    if(level != 0)
        return;
    array<Critter@> followers;
    for(int i = 0, j = GetFollowers(cr, true, followers); i < j; i++)
        UNSETFLAG(followers[i].FollowerVarBase[FV_FLAGS], FV_FLAG_MASTER_SPEAKER);
}

bool AssertProfessions(Critter& player)
{
    uint count = 0;
    for(uint i = PE_PROFESSION_BEGIN; i <= PE_PROFESSION_END; i++)
    {
        count += player.Perk[i];
    }
    if(count > PROFESSIONS_MAX)
        // assert;)
        Log("ERR: Too many professions...you cheater.");
    return count < PROFESSIONS_MAX;
}
#endif
