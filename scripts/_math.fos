//
// FOnline: 2238
// Rotators
//
// _math.fos
//

// Math macros

// MIN(a,b) - Smaller number or b if both numbers are equal
// MAX(a,b) - Larger number or b if both numbers are equal
// POW2(a) - Square of a
// POW3(a) - Cube of a

#ifndef __MATH__
#define __MATH__

#define PI                  (3.141592653589793238462643383279502884197169399375105820974944592307816406286208998628034825342117067982148086513282306647093844)

#define DEG2RAD             (0.01745329251994329576923690768488)

#define POW2                # (a)                 ((a) * (a))
#define POW3                # (a)                 ((a) * (a) * (a))
#define POW                                                                                                    \
    # (__x, __y)            do { int __v = 1; for(int __j = __y; __j > 0; __j >>= 1, __x *= __x) { if(__j % 2) \
                                                                                                       __v *= __x; } __x = __v; } while(false)
#define MIN                 # (a, b)(((a) < (b)) ? (a) : (b))
#define MAX                 # (a, b)(((a) > (b)) ? (a) : (b))
#define CLAMP               # (x, low, high)(((x) > (high)) ? (high) : (((x) < (low)) ? (low) : (x)))
#define ABS                 # (val)                (((val) > 0) ? (val) : (-(val)))
#define DISTANCE            # (x1, y1, x2, y2)DIST(x1, y1, x2, y2)

#define MAKEWORD            # (a, b)(uint16((uint8(a)) | (uint16(uint8(b))) << 8))
#define MAKELONG            # (a, b)(int32((uint16(a)) | (uint32(uint16(b))) << 16))
#define LOWORD              # (l)               (uint16(l))
#define HIWORD              # (l)               (uint16((uint32(l) >> 16) & 0xFFFF))
#define LOBYTE              # (w)               (uint8(w))
#define HIBYTE              # (w)               (uint8((uint16(w) >> 8) & 0xFF))
#define LBS_TO_GRAMM        # (lbs)       ((lbs) * 453)
#define GRAMM_TO_LBS        # (grm)       ((grm) / 453)

#define NUMERICAL_NUMBER    # (num)   ((num) * ((num) + 1) / 2)

#define DIST                # (x1, y1, x2, y2)(sqrt(((x1) - (x2)) * ((x1) - (x2)) + ((y1) - (y2)) * ((y1) - (y2))))

#define EVEN                # (num)               ((num) % 2 == 0)
#define ODD                 # (num)                (!EVEN(num))
#endif // __MATH__
