//
// FOnline: 2238
// Rotators
//
// quest_jt_scorpion.fos
//

#include "_colors.fos"
#include "_maps.fos"
#include "_vars.fos"
#include "_macros.fos"
#include "mapdata_h.fos"
#include "messages_h.fos"
#include "npc_common_h.fos"
#include "npc_planes_h.fos"
#include "npc_roles_h.fos"
#include "utils_h.fos"

// npc roles (defines distance mob will attack from))
#define ROLE_DEFAULT      (0)
#define ROLE_AGRESSIVE    (1)
#define ROLE_PASSIVE      (2)

// useful variables
#define ALERTED           # (cr)           (cr.StatBase[ST_VAR1]) // idle time is shorter if in that mode // note that it uses StatBase for read and write

// idle time in milseconds (normal is slower for performance issues)
#define IDLE_NORMAL       (5000)
#define IDLE_ALERTED      (1000)

import void FlushScreen(Critter& cr, bool fadeOut, uint timeMs) from "effects";

void r_SpawnMap(Critter& player, Critter@ npc)
{
    Critter@[] crits = { player };
    int loc = CreateLocation(LOCATION_RadscorpionCave, 1516, 1776, crits);
    if(loc == 0)
        return;
    GameVar@  locidv = GetLocalVar(LVAR_q_jt_sneakeater_locid, player.Id);
    locidv = loc;
    Location@ location = GetLocation(loc);
    location.Color = COLOR_WM_QUEST;
    location.Update();
    Map@      map = location.GetMapByIndex(0);

    if(player.Mode[MODE_DEFAULT_COMBAT] == COMBAT_MODE_TURN_BASED)
        SetTurnBasedAvailability(location);
    map.SetData(MAP_DATA_JT_SNEAKEATER_OWNER, player.Id);

    // Quest garbager is not needed in this quest
    SetQuestGarbager(0, player.Id, loc, LVAR_q_jt_sneakeater, 4);
}

void r_DeleteMap(Critter& critter, Critter@ npc)
{
    GameVar@ var = GetLocalVar(LVAR_q_jt_sneakeater_locid, critter.Id);
    DeleteLocation(var.GetValue());
}

Critter@ GetOwner(Map& map)
{
    return GetCritter(map.GetData(MAP_DATA_JT_SNEAKEATER_OWNER));
}
uint GetOwnerId(Map& map)
{
    return map.GetData(MAP_DATA_JT_SNEAKEATER_OWNER);
}

void CheckOwner(Critter& cr, int p0, int p1, int p2)
{
    cr.Say(SAY_NETMSG, "Owner: " + GetSafePlayerName(cr.GetMap().GetData(MAP_DATA_JT_SNEAKEATER_OWNER)));
}

// =============================================
// Demand / Result stuff
// =============================================


// =============================================
// Critter stuff
// =============================================

void _Scorpion(Critter& cr, bool firstTime)
{
    cr.StatBase[ST_REPLICATION_TIME] = REPLICATION_NEVER;
    cr.StatBase[ST_TOXIC] = 100;
    cr.StatBase[ST_MAX_LIFE_EXT] = 35;
    cr.StatBase[ST_CURRENT_HP] = 45;

    cr.ModeBase[MODE_NO_HOME] = 1;
    cr.SetEvent(CRITTER_EVENT_IDLE, "_MobIdle");
    // cr.SetEvent(CRITTER_EVENT_ATTACKED, "_Attacked");
    cr.SetEvent(CRITTER_EVENT_MESSAGE, "_OnMessage");
    cr.SetEvent(CRITTER_EVENT_SHOW_CRITTER, "_MobShowCritter");
    cr.SetEvent(CRITTER_EVENT_HIDE_CRITTER, "_MobHideCritter");
    _CritSetExtMode(cr, MODE_EXT_MOB);

    /*if(firstTime)
       {
            NpcSetLevel(cr, 10);
       } */
}

bool _Attacked(Critter& cr, Critter& attacker)
{
    cr.SendMessage(MSG_IM_ATTACKED, attacker.Id, MESSAGE_TO_ALL_ON_MAP);
    return false;
}

void _OnMessage(Critter& cr, Critter& fromCr, int message, int value)
{
    if(message == MSG_IM_ATTACKED)
        AttackCritter(cr, fromCr);
}

// =============================================
// Mob script parts
// =============================================

//
// Checks if critter is within attack distance
//
void _MobIdle(Critter& cr)
{
    // check critters in sight
    array<Critter@> crits;
    // get visible players
    uint            num = cr.GetCritters(false, FIND_ONLY_PLAYERS | FIND_LIFE, crits);
    // mob.Say(SAY_NORM_ON_HEAD, ""+num);
    // check distance
    uint dist = GetDistance(cr);
    for(uint i = 0; i < num; i++)
    {
        if(GetCrittersDistantion(cr, crits[i]) > dist)
            continue;
        else
        {
            // attack
            cr.AddEnemyInStack(crits[i].Id);
            return;
        }
    }
    if(ALERTED(cr) > 0)
    {
        // MoveMob(mob, false);
        cr.Wait(IDLE_ALERTED);
    }
    else
    {
        MoveMob(cr, false);
        // mob.Say(SAY_NORM_ON_HEAD, "Don't care");
        cr.Wait(IDLE_NORMAL);
    }
}

void MoveMob(Critter& cr, bool run)
{
    int dist = Random(0, (cr.Stat[ST_NPC_ROLE] % 100 / 10));
    if(dist == 0)
    {
        cr.MoveRandom();
    }
    else
    {
        // bool AddWalkPlane(Critter& npc, uint priory, uint16 hexX, uint16 hexY, uint8 dir, bool run, uint8 cut)
        uint16 hexX = cr.HexX;
        uint16 hexY = cr.HexY;
        cr.GetMap().MoveHexByDir(hexX, hexY, Random(0, 5), dist);
        AddWalkPlane(cr, 0, hexX, hexY, 0xff, run, 0);
    }
}

//
// Gets distance after which critter becomes agressive
//
uint GetDistance(Critter& cr)
{
    // TODO: damaged eye??
    uint base = __LookNormal + 3 * cr.Stat[ST_PERCEPTION];

    // switch works only for ints??
    int role = int(cr.Stat[ST_NPC_ROLE]);
    switch(role)
    {
    case ROLE_DEFAULT:
        // mob.Say(SAY_NORM, "" + base + "/" + 3 + "=" + base/3);
        return base / 3;
    case ROLE_AGRESSIVE:
        return base / 2;
    case ROLE_PASSIVE:
        return base / 4;
    }
    return base / 3;
}
//
// Alerts that oponent is near
//
void _MobShowCritter(Critter& cr, Critter& showCrit)
{
    if(showCrit.IsPlayer())
        ALERTED(cr) += 1;
}

void _MobHideCritter(Critter& cr, Critter& hideCrit)
{
    if(hideCrit.IsPlayer())
        ALERTED(cr) -= 1;
}
